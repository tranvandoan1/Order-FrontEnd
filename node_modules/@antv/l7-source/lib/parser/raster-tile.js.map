{"version":3,"sources":["../../src/parser/raster-tile.ts"],"names":["DEFAULT_CONFIG","tileSize","minZoom","maxZoom","Infinity","zoomOffset","getTileImage","url","tile","imgUrl","Promise","resolve","reject","err","img","rasterTile","data","cfg","getTileData","tilesetOptions","dataArray"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AAQA,IAAMA,cAA8C,GAAG;AACrDC,EAAAA,QAAQ,EAAE,GAD2C;AAErDC,EAAAA,OAAO,EAAE,CAF4C;AAGrDC,EAAAA,OAAO,EAAEC,QAH4C;AAIrDC,EAAAA,UAAU,EAAE;AAJyC,CAAvD;;AAOA,IAAMC,YAAY;AAAA,uEAAG,iBACnBC,GADmB,EAEnBC,IAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAIbC,YAAAA,MAJa,GAIJ,iCAAmBF,GAAnB,EAAwBC,IAAxB,CAJI;AAAA,6CAMZ,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,qCAAS;AAAEL,gBAAAA,GAAG,EAAEE;AAAP,eAAT,EAA0B,UAACI,GAAD,EAAWC,GAAX,EAAqC;AAC7D,oBAAID,GAAJ,EAAS;AACPD,kBAAAA,MAAM,CAACC,GAAD,CAAN;AACD,iBAFD,MAEO;AACLF,kBAAAA,OAAO,CAACG,GAAD,CAAP;AACD;AACF,eAND;AAOD,aARM,CANY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZR,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAiBe,SAASS,UAAT,CACbC,IADa,EAEbC,GAFa,EAGA;AACb,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACV,IAAD;AAAA,WAA0BF,YAAY,CAACU,IAAD,EAAOR,IAAP,CAAtC;AAAA,GAApB;;AACA,MAAMW,cAAc,iDAAQnB,cAAR,GAA2BiB,GAA3B;AAAgCC,IAAAA,WAAW,EAAXA;AAAhC,IAApB;;AAEA,SAAO;AACLF,IAAAA,IAAI,EAAJA,IADK;AAELI,IAAAA,SAAS,EAAE,EAFN;AAGLD,IAAAA,cAAc,EAAdA;AAHK,GAAP;AAKD","sourcesContent":["import {\n  getImage,\n  getURLFromTemplate,\n  TileLoadParams,\n  TilesetManagerOptions,\n} from '@antv/l7-utils';\nimport { IParserData, IRasterTileParserCFG } from '../interface';\n\nconst DEFAULT_CONFIG: Partial<TilesetManagerOptions> = {\n  tileSize: 256,\n  minZoom: 0,\n  maxZoom: Infinity,\n  zoomOffset: 0,\n};\n\nconst getTileImage = async (\n  url: string,\n  tile: TileLoadParams,\n): Promise<HTMLImageElement> => {\n  const imgUrl = getURLFromTemplate(url, tile);\n\n  return new Promise((resolve, reject) => {\n    getImage({ url: imgUrl }, (err: any, img: HTMLImageElement) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(img);\n      }\n    });\n  });\n};\n\nexport default function rasterTile(\n  data: string,\n  cfg?: IRasterTileParserCFG,\n): IParserData {\n  const getTileData = (tile: TileLoadParams) => getTileImage(data, tile);\n  const tilesetOptions = { ...DEFAULT_CONFIG, ...cfg, getTileData };\n\n  return {\n    data,\n    dataArray: [],\n    tilesetOptions,\n  };\n}\n"],"file":"raster-tile.js"}