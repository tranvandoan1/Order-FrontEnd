{"version":3,"sources":["../../../src/services/interaction/PickingService.ts"],"names":["PickingService","TYPES","IMapService","IRendererService","IGlobalConfigService","IInteractionService","ILayerService","Date","getTime","layer","x","y","lngLat","type","target","isPicked","rendererService","getViewportSize","readPixels","getContainer","getContainerSize","width","height","DOM","DPR","getLayerConfig","enableHighlight","enableSelect","xInDevicePixel","yInDevicePixel","pickedColors","Math","floor","pickBufferScale","data","Uint8Array","framebuffer","pickingFBO","pickedFeatureIdx","rawFeature","getSource","getFeatureById","getCurrentPickId","layerTarget","featureId","feature","setCurrentPickId","pickedLayers","triggerHoverOnLayer","highlightPickedFeature","toString","selectedId","getCurrentSelectedId","selectFeature","setCurrentSelectedId","id","createTexture2D","createFramebuffer","configService","getSceneConfig","color","round","wrapS","gl","CLAMP_TO_EDGE","wrapT","interactionService","on","InteractionEvent","Hover","pickingAllLayer","bind","box","cb","useFramebuffer","clear","resizePickingFBO","stencil","depth","hooks","beforePickingEncode","call","renderModels","afterPickingEncode","features","pickBox","map","v","tmpV","xMin","yMin","xMax","yMax","w","min","h","featuresIdMap","i","length","slice","push","cursor","cursorEnabled","version","mapService","domContainer","getMapContainer","getMarkerContainer","defaultCursor","style","getPropertyValue","setProperty","destroy","container","getContext","getBoundingClientRect","alreadyInPicking","layerService","alreadyInRendering","indragging","getShaderPickStat","t","lastPickTime","includes","pickingLayers","renderLayers","resize","layers","getRenderList","filter","needPick","reverse","some","masks","m","beforeRenderData","beforeRender","render","afterRender","pickedlayer","pickFromPickingFBO","pickedLayerId","enablePropagation","handleCursor","emit","r","g","b","beforeHighlight","beforeSelect"],"mappings":"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","sourcesContent":["import {\n  decodePickingColor,\n  DOM,\n  encodePickingColor,\n  isMini,\n} from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { isEventCrash } from '../../utils/dom';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport {\n  IInteractionService,\n  IInteractionTarget,\n  InteractionEvent,\n} from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILngLat, IMapService } from '../map/IMapService';\nimport { gl } from '../renderer/gl';\nimport { IFramebuffer } from '../renderer/IFramebuffer';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IPickingService } from './IPickingService';\n@injectable()\nexport default class PickingService implements IPickingService {\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IRendererService)\n  private rendererService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IInteractionService)\n  private interactionService: IInteractionService;\n\n  @inject(TYPES.ILayerService)\n  private layerService: ILayerService;\n  private pickingFBO: IFramebuffer;\n\n  private width: number = 0;\n\n  private height: number = 0;\n\n  private alreadyInPicking: boolean = false;\n\n  private pickBufferScale: number = 1.0;\n\n  private lastPickTime: number = new Date().getTime();\n\n  // Tip: 记录当前拾取中的 layers\n  private pickedLayers: ILayer[] = [];\n\n  public init(id: string) {\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n      getContainer,\n    } = this.rendererService;\n\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    this.pickBufferScale =\n      this.configService.getSceneConfig(id).pickBufferScale || 1;\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(\n      InteractionEvent.Hover,\n      this.pickingAllLayer.bind(this),\n    );\n  }\n\n  public async boxPickLayer(\n    layer: ILayer,\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ): Promise<any> {\n    const { useFramebuffer, clear, getContainer } = this.rendererService;\n    this.resizePickingFBO();\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1,\n      });\n      layer.hooks.beforePickingEncode.call();\n      layer.renderModels();\n      layer.hooks.afterPickingEncode.call();\n      const features = this.pickBox(layer, box);\n      cb(features);\n    });\n  }\n\n  public pickBox(layer: ILayer, box: [number, number, number, number]): any[] {\n    const [xMin, yMin, xMax, yMax] = box.map((v) => {\n      const tmpV = v < 0 ? 0 : v;\n      return Math.floor((tmpV * DOM.DPR) / this.pickBufferScale);\n    });\n    const { getViewportSize, readPixels, getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n    if (\n      xMin > ((width - 1) * DOM.DPR) / this.pickBufferScale ||\n      xMax < 0 ||\n      yMin > ((height - 1) * DOM.DPR) / this.pickBufferScale ||\n      yMax < 0\n    ) {\n      return [];\n    }\n    let pickedColors: Uint8Array | undefined;\n    const w = Math.min(width / this.pickBufferScale, xMax) - xMin;\n    const h = Math.min(height / this.pickBufferScale, yMax) - yMin;\n    pickedColors = readPixels({\n      x: xMin,\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor(height / this.pickBufferScale - (yMax + 1)),\n      width: w,\n      height: h,\n      data: new Uint8Array(w * h * 4),\n      framebuffer: this.pickingFBO,\n    });\n\n    const features = [];\n    const featuresIdMap: { [key: string]: boolean } = {};\n    for (let i = 0; i < pickedColors.length / 4; i = i + 1) {\n      const color = pickedColors.slice(i * 4, i * 4 + 4);\n      const pickedFeatureIdx = decodePickingColor(color);\n      if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n        const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n        features.push({\n          // @ts-ignore\n          ...rawFeature,\n          pickedFeatureIdx,\n        });\n        featuresIdMap[pickedFeatureIdx] = true;\n      }\n    }\n    return features;\n  }\n\n  // 动态设置鼠标光标\n  public handleCursor(layer: ILayer, type: string) {\n    const { cursor = '', cursorEnabled } = layer.getLayerConfig();\n    if (cursorEnabled) {\n      const version = this.mapService.version;\n      const domContainer =\n        version === 'GAODE2.x'\n          ? this.mapService.getMapContainer()\n          : this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMarkerContainer();\n      // const domContainer = this.mapService.getMapContainer();\n      const defaultCursor = domContainer?.style.getPropertyValue('cursor');\n      if (type === 'unmousemove' && defaultCursor !== '') {\n        domContainer?.style.setProperty('cursor', '');\n      } else if (type === 'mousemove') {\n        domContainer?.style.setProperty('cursor', cursor);\n      }\n    }\n    // const domContainer = this.mapService.getMapContainer()\n    // domContainer?.style.setProperty('cursor', 'move');\n  }\n\n  public destroy() {\n    this.pickingFBO.destroy();\n    // this.pickingFBO = null; 清除对 webgl 实例的引用\n    // @ts-ignore\n    this.pickingFBO = null;\n  }\n\n  // 获取容器的大小 - 兼容小程序环境\n  private getContainerSize(container: HTMLCanvasElement | HTMLElement) {\n    if (!!(container as HTMLCanvasElement).getContext) {\n      return {\n        width: (container as HTMLCanvasElement).width / DOM.DPR,\n        height: (container as HTMLCanvasElement).height / DOM.DPR,\n      };\n    } else {\n      return container.getBoundingClientRect();\n    }\n  }\n  private async pickingAllLayer(target: IInteractionTarget) {\n    if (\n      // TODO: this.alreadyInPicking 避免多次重复拾取\n      this.alreadyInPicking ||\n      // TODO: this.layerService.alreadyInRendering 一个渲染序列中只进行一次拾取操作\n      this.layerService.alreadyInRendering ||\n      // Tip: this.interactionService.dragging amap2 在点击操作的时候同时会触发 dragging 的情况（避免舍去）\n      this.interactionService.indragging ||\n      // TODO: 判断当前 是都进行 shader pick 拾取判断\n      !this.layerService.getShaderPickStat()\n    ) {\n      return;\n    }\n    this.alreadyInPicking = true;\n    const t = new Date().getTime();\n    // TODO: 优化拾取操作 在右键时 mousedown 和 contextmenu 几乎同时触发，所以不能舍去这一次的触发\n    if (\n      t - this.lastPickTime > 10 ||\n      ['contextmenu', 'click', 'mouseup'].includes(target.type)\n    ) {\n      await this.pickingLayers(target);\n    }\n    // await this.pickingLayers(target);\n    // @ts-ignore\n    this.lastPickTime = t;\n    this.layerService.renderLayers();\n    this.alreadyInPicking = false;\n  }\n\n  private resizePickingFBO() {\n    const { getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n\n    if (this.width !== width || this.height !== height) {\n      this.pickingFBO.resize({\n        width: Math.round(width / this.pickBufferScale),\n        height: Math.round(height / this.pickBufferScale),\n      });\n      this.width = width;\n      this.height = height;\n    }\n  }\n  private async pickingLayers(target: IInteractionTarget) {\n    const {\n      getViewportSize,\n      useFramebuffer,\n      clear,\n      getContainer,\n    } = this.rendererService;\n    this.resizePickingFBO();\n\n    useFramebuffer(this.pickingFBO, () => {\n      const layers = this.layerService.getRenderList();\n      layers\n        .filter((layer) => layer.needPick(target.type))\n        .reverse()\n        .some((layer) => {\n          clear({\n            framebuffer: this.pickingFBO,\n            color: [0, 0, 0, 0],\n            stencil: 0,\n            depth: 1,\n          });\n          layer.hooks.beforePickingEncode.call();\n\n          if (layer.masks.length > 0) {\n            // 若存在 mask，则在 pick 阶段的绘制也启用\n            layer.masks.map((m: ILayer) => {\n              m.hooks.beforeRenderData.call();\n              m.hooks.beforeRender.call();\n              m.render();\n              m.hooks.afterRender.call();\n            });\n          }\n\n          layer.renderModels(true);\n          layer.hooks.afterPickingEncode.call();\n\n          // Tip: clear last picked layer state\n          this.pickedLayers.map((pickedlayer) => {\n            this.selectFeature(pickedlayer, new Uint8Array([0, 0, 0, 0]));\n          });\n\n          const isPicked = this.pickFromPickingFBO(layer, target);\n          this.layerService.pickedLayerId = isPicked ? +layer.id : -1;\n\n          return isPicked && !layer.getLayerConfig().enablePropagation;\n        });\n    });\n  }\n\n  private pickFromPickingFBO = (\n    layer: ILayer,\n    { x, y, lngLat, type, target }: IInteractionTarget,\n  ) => {\n    let isPicked = false;\n    const { getViewportSize, readPixels, getContainer } = this.rendererService;\n    let { width, height } = this.getContainerSize(\n      getContainer() as HTMLCanvasElement | HTMLElement,\n    );\n    width *= DOM.DPR;\n    height *= DOM.DPR;\n\n    const { enableHighlight, enableSelect } = layer.getLayerConfig();\n\n    const xInDevicePixel = x * DOM.DPR;\n    const yInDevicePixel = y * DOM.DPR;\n    if (\n      xInDevicePixel > width - 1 * DOM.DPR ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height - 1 * DOM.DPR ||\n      yInDevicePixel < 0\n    ) {\n      return false;\n    }\n    let pickedColors: Uint8Array | undefined;\n    pickedColors = readPixels({\n      x: Math.floor(xInDevicePixel / this.pickBufferScale),\n      // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n      y: Math.floor((height - (y + 1) * DOM.DPR) / this.pickBufferScale),\n      width: 1,\n      height: 1,\n      data: new Uint8Array(1 * 1 * 4),\n      framebuffer: this.pickingFBO,\n    });\n\n    // let pickedColors = new Uint8Array(4)\n    // this.rendererService.getGLContext().readPixels(\n    //   Math.floor(xInDevicePixel / this.pickBufferScale),\n    //   Math.floor((height - (y + 1) * DOM.DPR) / this.pickBufferScale),\n    //   1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pickedColors)\n    // console.log(pickedColors[0] == pixels[0] && pickedColors[1] == pixels[1] && pickedColors[2] == pixels[2])\n\n    if (\n      pickedColors[0] !== 0 ||\n      pickedColors[1] !== 0 ||\n      pickedColors[2] !== 0\n    ) {\n      const pickedFeatureIdx = decodePickingColor(pickedColors);\n      const rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n      if (\n        pickedFeatureIdx !== layer.getCurrentPickId() &&\n        type === 'mousemove'\n      ) {\n        type = 'mouseenter';\n      }\n\n      const layerTarget = {\n        x,\n        y,\n        type,\n        lngLat,\n        featureId: pickedFeatureIdx,\n        feature: rawFeature,\n        target,\n      };\n      if (!rawFeature) {\n        // this.logger.error(\n        //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n        // );\n      } else {\n        // trigger onHover/Click callback on layer\n        isPicked = true;\n        layer.setCurrentPickId(pickedFeatureIdx);\n        this.pickedLayers = [layer];\n        this.triggerHoverOnLayer(layer, layerTarget); // 触发拾取事件\n      }\n    } else {\n      // 未选中\n      const layerTarget = {\n        x,\n        y,\n        lngLat,\n        type:\n          layer.getCurrentPickId() !== null && type === 'mousemove'\n            ? 'mouseout'\n            : 'un' + type,\n        featureId: null,\n        target,\n        feature: null,\n      };\n      this.triggerHoverOnLayer(layer, {\n        ...layerTarget,\n        type: 'unpick',\n      });\n      this.triggerHoverOnLayer(layer, layerTarget);\n      layer.setCurrentPickId(null);\n      this.pickedLayers = [];\n    }\n\n    if (enableHighlight) {\n      this.highlightPickedFeature(layer, pickedColors);\n    }\n    if (\n      enableSelect &&\n      type === 'click' &&\n      pickedColors?.toString() !== [0, 0, 0, 0].toString()\n    ) {\n      const selectedId = decodePickingColor(pickedColors);\n      if (\n        layer.getCurrentSelectedId() === null ||\n        selectedId !== layer.getCurrentSelectedId()\n      ) {\n        this.selectFeature(layer, pickedColors);\n        layer.setCurrentSelectedId(selectedId);\n      } else {\n        this.selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select\n        layer.setCurrentSelectedId(null);\n      }\n    }\n    return isPicked;\n  };\n  private triggerHoverOnLayer(\n    layer: ILayer,\n    target: {\n      x: number;\n      y: number;\n      type: string;\n      lngLat: ILngLat;\n      feature: unknown;\n      featureId: number | null;\n    },\n  ) {\n    // layer.emit(target.type, target);\n    // 判断是否发生事件冲突\n    if (isEventCrash(target)) {\n      // Tip: 允许用户动态设置鼠标光标\n      this.handleCursor(layer, target.type);\n      layer.emit(target.type, target);\n    }\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(\n    layer: ILayer,\n    pickedColors: Uint8Array | undefined,\n  ) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeHighlight.call([r, g, b]);\n  }\n\n  private selectFeature(layer: ILayer, pickedColors: Uint8Array | undefined) {\n    // @ts-ignore\n    const [r, g, b] = pickedColors;\n    layer.hooks.beforeSelect.call([r, g, b]);\n  }\n}\n"],"file":"PickingService.js"}