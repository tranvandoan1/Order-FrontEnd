{"version":3,"sources":["../../../src/heatmap/models/heatmap.ts"],"names":["AttributeType","gl","generateColorRamp","getCullFace","getMask","mat4","injectable","BaseModel","HeatmapTriangulation","heatMap3DTriangulation","HeatMapModel","rendererService","clear","useFramebuffer","heatmapFramerBuffer","color","depth","stencil","framebuffer","drawIntensityMode","layer","styleNeedUpdate","updateColorTexture","shapeType","drawColorMode","draw3DHeatMap","Error","createFramebuffer","getViewportSize","createTexture2D","shapeAttr","styleAttributeService","getLayerStyleAttribute","scale","field","intensityModel","buildHeatMapIntensity","colorModel","buildHeatmapColor","build3dHeatMap","width","height","Math","floor","wrapS","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","initModels","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","triangulation","buildLayerModel","moduleName","vertexShader","heatmapFramebufferVert","fragmentShader","heatmapFramebufferFrag","enable","cull","face","mapService","version","blend","func","srcRGB","ONE","srcAlpha","dstRGB","dstAlpha","getLayerConfig","mask","maskInside","shaderModuleService","registerModule","vs","heatmapColorVert","fs","heatmapColorFrag","getModule","uniforms","createAttribute","createElements","createBuffer","createModel","attributes","a_Position","a_Uv","getBlend","count","elements","UNSIGNED_INT","opacity","intensity","radius","draw","u_opacity","u_radius","u_intensity","u_colorTexture","colorTexture","u_texture","invert","create","cameraService","getViewProjectionMatrixUncentered","u_ViewProjectionMatrixUncentered","u_InverseViewProjectionMatrix","heatmap3DVert","heatmap3DFrag","vertices","uvs","primitive","TRIANGLES","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","indices","length","texture","destroy","rampColors","imageData","Uint8Array","NEAREST","flipY"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IFramebuffer,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport {\n  generateColorRamp,\n  getCullFace,\n  getMask,\n  IColorRamp,\n} from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport BaseModel from '../../core/BaseModel';\nimport { IHeatMapLayerStyleOptions } from '../../core/interface';\nimport { HeatmapTriangulation } from '../../core/triangulation';\nimport heatmap3DFrag from '../shaders/heatmap_3d_frag.glsl';\nimport heatmap3DVert from '../shaders/heatmap_3d_vert.glsl';\n\n// 绘制平面热力的 shader\nimport heatmapColorFrag from '../shaders/heatmap_frag.glsl';\nimport heatmapColorVert from '../shaders/heatmap_vert.glsl';\n\nimport heatmapFramebufferFrag from '../shaders/heatmap_framebuffer_frag.glsl';\nimport heatmapFramebufferVert from '../shaders/heatmap_framebuffer_vert.glsl';\n\nimport { heatMap3DTriangulation } from '../triangulation';\n@injectable()\nexport default class HeatMapModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected colorTexture: ITexture2D;\n  protected heatmapFramerBuffer: IFramebuffer;\n  private intensityModel: IModel;\n  private colorModel: IModel;\n  private shapeType: string;\n\n  public render() {\n    const { clear, useFramebuffer } = this.rendererService;\n    useFramebuffer(this.heatmapFramerBuffer, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.heatmapFramerBuffer,\n      });\n      this.drawIntensityMode();\n    });\n    if (this.layer.styleNeedUpdate) {\n      this.updateColorTexture();\n    }\n    this.shapeType === 'heatmap' ? this.drawColorMode() : this.draw3DHeatMap();\n  }\n\n  public getUninforms(): IModelUniform {\n    throw new Error('Method not implemented.');\n  }\n\n  public initModels(): IModel[] {\n    const {\n      createFramebuffer,\n      clear,\n      getViewportSize,\n      createTexture2D,\n      useFramebuffer,\n    } = this.rendererService;\n    const shapeAttr = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shapeType = shapeAttr?.scale?.field || 'heatmap';\n    this.shapeType = shapeType as string;\n    // 生成热力图密度图\n    this.intensityModel = this.buildHeatMapIntensity();\n    // 渲染到屏幕\n    this.colorModel =\n      shapeType === 'heatmap'\n        ? this.buildHeatmapColor() // 2D\n        : this.build3dHeatMap(); // 3D\n\n    const { width, height } = getViewportSize();\n\n    // 初始化密度图纹理\n    this.heatmapFramerBuffer = createFramebuffer({\n      color: createTexture2D({\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n      }),\n      depth: false,\n    });\n\n    this.updateColorTexture();\n\n    return [this.intensityModel, this.colorModel];\n  }\n\n  public buildModels(): IModel[] {\n    return this.initModels();\n  }\n\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'dir',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Dir',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return [size as number];\n        },\n      },\n    });\n  }\n  private buildHeatMapIntensity(): IModel {\n    this.layer.triangulation = HeatmapTriangulation;\n    return this.layer.buildLayerModel({\n      moduleName: 'heatmapintensity',\n      vertexShader: heatmapFramebufferVert,\n      fragmentShader: heatmapFramebufferFrag,\n      triangulation: HeatmapTriangulation,\n      depth: {\n        enable: false,\n      },\n      cull: {\n        enable: true,\n        face: getCullFace(this.mapService.version),\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          srcAlpha: 1,\n          dstRGB: gl.ONE,\n          dstAlpha: 1,\n        },\n      },\n    });\n  }\n\n  private buildHeatmapColor(): IModel {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.shaderModuleService.registerModule('heatmapColor', {\n      vs: heatmapColorVert,\n      fs: heatmapColorFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmapColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: [0, 1, 1, 1, 0, 0, 1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: false,\n      },\n      blend: this.getBlend(),\n      count: 6,\n      elements: createElements({\n        data: [0, 2, 1, 2, 3, 1],\n        type: gl.UNSIGNED_INT,\n        count: 6,\n      }),\n      stencil: getMask(mask, maskInside),\n    });\n  }\n\n  private drawIntensityMode() {\n    const {\n      opacity,\n      intensity = 10,\n      radius = 5,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.intensityModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_radius: radius,\n        u_intensity: intensity,\n      },\n    });\n  }\n\n  private drawColorMode() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n      },\n    });\n  }\n\n  private draw3DHeatMap() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n\n    // const invert = mat4.invert(\n    //   mat4.create(),\n    //   mat4.fromValues(\n    //     // @ts-ignore\n    //     ...this.cameraService.getViewProjectionMatrixUncentered(),\n    //   ),\n    // ) as mat4;\n    const invert = mat4.create();\n    mat4.invert(\n      invert,\n      this.cameraService.getViewProjectionMatrixUncentered() as mat4,\n    );\n\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n        u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n        u_InverseViewProjectionMatrix: [...invert],\n      },\n    });\n  }\n  private build3dHeatMap() {\n    const {\n      mask = false,\n      maskInside = true,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const { getViewportSize } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n    this.shaderModuleService.registerModule('heatmap3dColor', {\n      vs: heatmap3DVert,\n      fs: heatmap3DFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmap3dColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.uvs,\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      primitive: gl.TRIANGLES,\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: true,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1,\n        },\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length,\n      }),\n      stencil: getMask(mask, maskInside),\n    });\n  }\n  private updateStyle() {\n    this.updateColorTexture();\n  }\n\n  private updateColorTexture() {\n    const { createTexture2D } = this.rendererService;\n    if (this.texture) {\n      this.texture.destroy();\n    }\n\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: new Uint8Array(imageData.data),\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n    });\n  }\n}\n"],"file":"heatmap.js"}