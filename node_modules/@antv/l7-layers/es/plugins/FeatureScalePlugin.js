import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _uniq from "lodash/uniq";
import _isString from "lodash/isString";
import _isNil from "lodash/isNil";

var _scaleMap, _dec, _dec2, _class, _class2, _descriptor;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { ScaleTypes, StyleScaleType, TYPES } from '@antv/l7-core';
import { extent } from 'd3-array';
import * as d3interpolate from 'd3-interpolate';
import * as d3 from 'd3-scale';
import { inject, injectable } from 'inversify';
import 'reflect-metadata';
var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
var scaleMap = (_scaleMap = {}, _defineProperty(_scaleMap, ScaleTypes.LINEAR, d3.scaleLinear), _defineProperty(_scaleMap, ScaleTypes.POWER, d3.scalePow), _defineProperty(_scaleMap, ScaleTypes.LOG, d3.scaleLog), _defineProperty(_scaleMap, ScaleTypes.IDENTITY, d3.scaleIdentity), _defineProperty(_scaleMap, ScaleTypes.SEQUENTIAL, d3.scaleSequential), _defineProperty(_scaleMap, ScaleTypes.TIME, d3.scaleTime), _defineProperty(_scaleMap, ScaleTypes.QUANTILE, d3.scaleQuantile), _defineProperty(_scaleMap, ScaleTypes.QUANTIZE, d3.scaleQuantize), _defineProperty(_scaleMap, ScaleTypes.THRESHOLD, d3.scaleThreshold), _defineProperty(_scaleMap, ScaleTypes.CAT, d3.scaleOrdinal), _defineProperty(_scaleMap, ScaleTypes.DIVERGING, d3.scaleDiverging), _scaleMap);
var FeatureScalePlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {
  function FeatureScalePlugin() {
    _classCallCheck(this, FeatureScalePlugin);

    _initializerDefineProperty(this, "configService", _descriptor, this);

    _defineProperty(this, "scaleCache", {});

    _defineProperty(this, "scaleOptions", {});
  }

  _createClass(FeatureScalePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('FeatureScalePlugin', function () {
        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();
        var dataArray = layer.getSource().data.dataArray;

        if (dataArray.length === 0) {
          return;
        }

        _this.caculateScalesForAttributes(attributes || [], dataArray);
      });
      layer.hooks.beforeRenderData.tap('FeatureScalePlugin', function () {
        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();
        var dataArray = layer.getSource().data.dataArray;

        _this.caculateScalesForAttributes(attributes || [], dataArray);

        layer.layerModelNeedUpdate = true;
        return true;
      });
      layer.hooks.beforeRender.tap('FeatureScalePlugin', function () {
        if (layer.layerModelNeedUpdate) {
          return;
        }

        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();

        if (attributes) {
          var dataArray = layer.getSource().data.dataArray;

          if (dataArray.length === 0) {
            return;
          }

          var attributesToRescale = attributes.filter(function (attribute) {
            return attribute.needRescale;
          });

          if (attributesToRescale.length) {
            _this.caculateScalesForAttributes(attributesToRescale, dataArray);
          }
        }
      });
    }
  }, {
    key: "isNumber",
    value: function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
  }, {
    key: "caculateScalesForAttributes",
    value: function caculateScalesForAttributes(attributes, dataArray) {
      var _this2 = this;

      this.scaleCache = {};
      attributes.forEach(function (attribute) {
        if (attribute.scale) {
          var attributeScale = attribute.scale;
          var type = attribute.name;
          attributeScale.names = _this2.parseFields(attribute.scale.field || []);
          var scales = [];
          attributeScale.names.forEach(function (field) {
            var _attribute$scale;

            scales.push(_this2.createScale(field, attribute.name, (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.values, dataArray));
          });

          if (scales.some(function (scale) {
            return scale.type === StyleScaleType.VARIABLE;
          })) {
            attributeScale.type = StyleScaleType.VARIABLE;
            scales.forEach(function (scale) {
              if (!attributeScale.callback) {
                var _scale$option, _scale$option2, _scale$option3, _scale$option4, _scale$option5;

                if (attributeScale.values && attributeScale.values !== 'text' && ((_scale$option = scale.option) === null || _scale$option === void 0 ? void 0 : _scale$option.type) !== ScaleTypes.DIVERGING && ((_scale$option2 = scale.option) === null || _scale$option2 === void 0 ? void 0 : _scale$option2.type) !== ScaleTypes.SEQUENTIAL) {
                  scale.scale.range(attributeScale.values);
                } else if (((_scale$option3 = scale.option) === null || _scale$option3 === void 0 ? void 0 : _scale$option3.type) === ScaleTypes.CAT) {
                  scale.scale.range(scale.option.domain);
                } else if (((_scale$option4 = scale.option) === null || _scale$option4 === void 0 ? void 0 : _scale$option4.type) === ScaleTypes.DIVERGING || ((_scale$option5 = scale.option) === null || _scale$option5 === void 0 ? void 0 : _scale$option5.type) === ScaleTypes.SEQUENTIAL) {
                  scale.scale.interpolator(d3interpolate.interpolateRgbBasis(attributeScale.values));
                }
              }
            });
          } else {
            attributeScale.type = StyleScaleType.CONSTANT;
            attributeScale.defaultValues = scales.map(function (scale, index) {
              return scale.scale(attributeScale.names[index]);
            });
          }

          attributeScale.scalers = scales.map(function (scale) {
            return {
              field: scale.field,
              func: scale.scale,
              option: scale.option
            };
          });
          attribute.needRescale = false;
        }
      });
    }
  }, {
    key: "parseFields",
    value: function parseFields(field) {
      if (Array.isArray(field)) {
        return field;
      }

      if (_isString(field)) {
        return field.split('*');
      }

      return [field];
    }
  }, {
    key: "createScale",
    value: function createScale(field, name, values, data) {
      var _this$scaleOptions$na, _find;

      var scaleOption = this.scaleOptions[name] && ((_this$scaleOptions$na = this.scaleOptions[name]) === null || _this$scaleOptions$na === void 0 ? void 0 : _this$scaleOptions$na.field) === field ? this.scaleOptions[name] : this.scaleOptions[field];
      var styleScale = {
        field: field,
        scale: undefined,
        type: StyleScaleType.VARIABLE,
        option: scaleOption
      };

      if (!data || !data.length) {
        if (scaleOption && scaleOption.type) {
          styleScale.scale = this.createDefaultScale(scaleOption);
        } else {
          styleScale.scale = d3.scaleOrdinal([field]);
          styleScale.type = StyleScaleType.CONSTANT;
        }

        return styleScale;
      }

      var firstValue = (_find = data.find(function (d) {
        return !_isNil(d[field]);
      })) === null || _find === void 0 ? void 0 : _find[field];

      if (this.isNumber(field) || _isNil(firstValue) && !scaleOption) {
        styleScale.scale = d3.scaleOrdinal([field]);
        styleScale.type = StyleScaleType.CONSTANT;
      } else {
        var type = scaleOption && scaleOption.type || this.getDefaultType(firstValue);

        if (values === 'text') {
          type = ScaleTypes.CAT;
        }

        var cfg = this.createScaleConfig(type, field, scaleOption, data);
        styleScale.scale = this.createDefaultScale(cfg);
        styleScale.option = cfg;
      }

      return styleScale;
    }
  }, {
    key: "getDefaultType",
    value: function getDefaultType(firstValue) {
      var type = ScaleTypes.LINEAR;

      if (typeof firstValue === 'string') {
        type = dateRegex.test(firstValue) ? ScaleTypes.TIME : ScaleTypes.CAT;
      }

      return type;
    }
  }, {
    key: "createScaleConfig",
    value: function createScaleConfig(type, field, scaleOption, data) {
      var cfg = {
        type: type
      };
      var values = (data === null || data === void 0 ? void 0 : data.map(function (item) {
        return item[field];
      })) || [];

      if (scaleOption !== null && scaleOption !== void 0 && scaleOption.domain) {
        cfg.domain = scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.domain;
      } else if (type !== ScaleTypes.CAT && type !== ScaleTypes.QUANTILE && type !== ScaleTypes.DIVERGING) {
        cfg.domain = extent(values);
      } else if (type === ScaleTypes.CAT) {
        cfg.domain = _uniq(values);
      } else if (type === ScaleTypes.QUANTILE) {
        cfg.domain = values;
      } else if (type === ScaleTypes.DIVERGING) {
        var minMax = extent(values);
        var neutral = (scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral) !== undefined ? scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral : (minMax[0] + minMax[1]) / 2;
        cfg.domain = [minMax[0], neutral, minMax[1]];
      }

      return _objectSpread(_objectSpread({}, cfg), scaleOption);
    }
  }, {
    key: "createDefaultScale",
    value: function createDefaultScale(_ref2) {
      var type = _ref2.type,
          domain = _ref2.domain,
          unknown = _ref2.unknown,
          clamp = _ref2.clamp,
          nice = _ref2.nice;
      var scale = scaleMap[type]();

      if (domain && scale.domain) {
        scale.domain(domain);
      }

      if (unknown) {
        scale.unknown(unknown);
      }

      if (clamp !== undefined && scale.clamp) {
        scale.clamp(clamp);
      }

      if (nice !== undefined && scale.nice) {
        scale.nice(nice);
      }

      return scale;
    }
  }]);

  return FeatureScalePlugin;
}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { FeatureScalePlugin as default };
//# sourceMappingURL=FeatureScalePlugin.js.map