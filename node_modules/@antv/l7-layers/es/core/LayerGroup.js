import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import BaseLayer from './BaseLayer';

var LayerGroup = function (_BaseLayer) {
  _inherits(LayerGroup, _BaseLayer);

  var _super = _createSuper(LayerGroup);

  function LayerGroup() {
    var _this;

    _classCallCheck(this, LayerGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "isLayerGroup", true);

    return _this;
  }

  _createClass(LayerGroup, [{
    key: "addChild",
    value: function addChild(layer) {
      this.layerChildren.push(layer);
    }
  }, {
    key: "removeChild",
    value: function removeChild(layer) {
      var layerIndex = this.layerChildren.indexOf(layer);

      if (layerIndex > -1) {
        this.layerChildren.splice(layerIndex, 1);
      }

      layer.destroy();
    }
  }, {
    key: "clearChild",
    value: function clearChild() {
      this.layerChildren.forEach(function (layer) {
        layer.destroy();
      });
      this.layerChildren = [];
    }
  }, {
    key: "hasChild",
    value: function hasChild(layer) {
      return this.layerChildren.includes(layer);
    }
  }]);

  return LayerGroup;
}(BaseLayer);

export { LayerGroup as default };
//# sourceMappingURL=LayerGroup.js.map