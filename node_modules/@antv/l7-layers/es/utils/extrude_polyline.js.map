{"version":3,"sources":["../../src/utils/extrude_polyline.ts"],"names":["aProjectFlat","vec2","tmp","create","capEnd","lineA","lineB","tangent","computeMiter","lineTangent","miter","start","end","halfThick","add","normalize","fromValues","tmpvec","dot","computeNormal","out","dir","set","direction","a","b","sub","isPointEqual","getArrayUnique","matrix","map","Map","i","length","key","toString","get","splice","ExtrudePolyline","opts","join","cap","miterLimit","thickness","dash","complex","positions","indices","normals","startIndex","indexes","points","originPoints","lastFlip","started","normal","totalDistance","total","count","last","push","originLast","cur","originCur","next","originNext","amt","segment_gaode2","simpleSegment","segment","index","capSquare","joinBevel","flatCur","flatLast","segmentDistance","lineSegmentDistance","out1","out2","currentIndex","extrusions","subtract","miterLen","flip","bevel","limit","copy","flatNext","point","distanceRadio","b1","a1","dx","dy","Math","sqrt"],"mappings":"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","sourcesContent":["import { aProjectFlat } from '@antv/l7-utils';\nimport { vec2, vec3 } from 'gl-matrix';\nconst tmp = vec2.create();\nconst capEnd = vec2.create();\nconst lineA = vec2.create();\nconst lineB = vec2.create();\nconst tangent = vec2.create();\n\nexport function computeMiter(\n  lineTangent: vec2,\n  miter: vec2,\n  start: vec2,\n  end: vec2,\n  halfThick: number,\n): [number, vec2] {\n  vec2.add(lineTangent, start, end);\n  vec2.normalize(lineTangent, lineTangent);\n  miter = vec2.fromValues(-lineTangent[1], lineTangent[0]);\n  const tmpvec = vec2.fromValues(-start[1], start[0]);\n  return [halfThick / vec2.dot(miter, tmpvec), miter];\n}\nexport function computeNormal(out: vec2, dir: vec2) {\n  return vec2.set(out, -dir[1], dir[0]);\n}\n\nexport function direction(out: vec2, a: vec2, b: vec2) {\n  vec2.sub(out, a, b);\n  vec2.normalize(out, out);\n  return out;\n}\n\nfunction isPointEqual(a: vec2, b: vec2) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\nfunction getArrayUnique(matrix: number[][]) {\n  const map = new Map();\n  for (let i = 0; i < matrix.length; i++) {\n    const key = matrix[0].toString() + '-' + matrix[1].toString();\n    if (map.get(key)) {\n      matrix.splice(i, 1);\n      i++;\n    } else {\n      map.set(key, key);\n    }\n  }\n  return matrix;\n}\n\nexport interface IExtrudeLineOption {\n  join: string;\n  cap: string;\n  dash: boolean;\n  closed: boolean;\n  indexOffset: number;\n  miterLimit: number;\n  thickness: number;\n}\nexport default class ExtrudePolyline {\n  public complex: {\n    positions: number[];\n    indices: number[];\n    normals: number[];\n    startIndex: number;\n    indexes: number[];\n  };\n  private join: string;\n  private cap: string;\n  private miterLimit: number;\n  private thickness: number;\n  private normal: vec2 | null;\n  private lastFlip: number = -1;\n  private miter: vec2 = vec2.fromValues(0, 0);\n  private started: boolean = false;\n  private dash: boolean = false;\n  private totalDistance: number = 0;\n  private currentIndex: number = 0;\n\n  constructor(opts: Partial<IExtrudeLineOption> = {}) {\n    this.join = opts.join || 'miter';\n    this.cap = opts.cap || 'butt';\n    this.miterLimit = opts.miterLimit || 10;\n    this.thickness = opts.thickness || 1;\n    this.dash = opts.dash || false;\n    this.complex = {\n      positions: [],\n      indices: [],\n      normals: [],\n      startIndex: 0,\n      indexes: [],\n    };\n  }\n\n  public extrude_gaode2(points: number[][], originPoints: number[][]) {\n    const complex = this.complex;\n    if (points.length <= 1) {\n      return complex;\n    }\n    this.lastFlip = -1;\n    this.started = false;\n    this.normal = null;\n    this.totalDistance = 0;\n    // 去除数组里重复的点\n    // points = getArrayUnique(points);\n    const total = points.length;\n    let count = complex.startIndex;\n    for (let i = 1; i < total; i++) {\n      const last = points[i - 1];\n      last.push(originPoints[i - 1][2] ?? 0);\n      // @ts-ignore\n      const originLast = originPoints[i - 1] as vec3;\n\n      const cur = points[i];\n      cur.push(originPoints[i][2] ?? 0);\n      // @ts-ignore\n      const originCur = originPoints[i] as vec3;\n\n      const next =\n        i < points.length - 1\n          ? [...points[i + 1], originPoints[i + 1][2] ?? 0]\n          : null;\n      const originNext =\n        i < originPoints.length - 1 ? originPoints[i + 1] : null;\n\n      const amt = this.segment_gaode2(\n        complex,\n        count,\n        // @ts-ignore\n        last as vec3,\n        // @ts-ignore\n        cur as vec3,\n        // @ts-ignore\n        next as vec3,\n        // @ts-ignore\n        originLast,\n        originCur,\n        // @ts-ignore\n        originNext as vec3,\n      );\n      count += amt;\n    }\n    if (this.dash) {\n      for (let i = 0; i < complex.positions.length / 6; i++) {\n        complex.positions[i * 6 + 5] = this.totalDistance;\n      }\n    }\n    complex.startIndex = complex.positions.length / 6;\n    return complex;\n  }\n  public simpleExtrude_gaode2(points: number[][], originPoints: number[][]) {\n    const complex = this.complex;\n    if (points.length <= 1) {\n      return complex;\n    }\n    this.lastFlip = -1;\n    this.started = false;\n    this.normal = null;\n    this.totalDistance = 0;\n    // 去除数组里重复的点\n    // points = getArrayUnique(points);\n    const total = points.length;\n    let count = complex.startIndex;\n    for (let i = 1; i < total; i++) {\n      const last = points[i - 1];\n      last.push(originPoints[i - 1][2] ?? 0);\n      // @ts-ignore\n      const originLast = originPoints[i - 1] as vec3;\n\n      const cur = points[i];\n      cur.push(originPoints[i][2] ?? 0);\n      // @ts-ignore\n      const originCur = originPoints[i] as vec3;\n\n      const next =\n        i < points.length - 1\n          ? [...points[i + 1], originPoints[i + 1][2] ?? 0]\n          : null;\n      const originNext =\n        i < originPoints.length - 1 ? originPoints[i + 1] : null;\n\n      const amt = this.simpleSegment(\n        complex,\n        count,\n        // @ts-ignore\n        last as vec3,\n        // @ts-ignore\n        cur as vec3,\n        // @ts-ignore\n        next as vec3,\n        // @ts-ignore\n        originLast,\n        originCur,\n        // @ts-ignore\n        originNext as vec3,\n      );\n      count += amt;\n    }\n    if (this.dash) {\n      for (let i = 0; i < complex.positions.length / 6; i++) {\n        complex.positions[i * 6 + 5] = this.totalDistance;\n      }\n    }\n    complex.startIndex = complex.positions.length / 6;\n    return complex;\n  }\n  public extrude(points: number[][]) {\n    const complex = this.complex;\n    if (points.length <= 1) {\n      return complex;\n    }\n    this.lastFlip = -1;\n    this.started = false;\n    this.normal = null;\n    this.totalDistance = 0;\n    // 去除数组里重复的点\n    // points = getArrayUnique(points);\n    const total = points.length;\n    let count = complex.startIndex;\n    for (let i = 1; i < total; i++) {\n      const last = points[i - 1] as vec3;\n      const cur = points[i] as vec3;\n      const next = i < points.length - 1 ? points[i + 1] : null;\n      const amt = this.segment(complex, count, last, cur, next as vec3);\n      count += amt;\n    }\n    if (this.dash) {\n      for (let i = 0; i < complex.positions.length / 6; i++) {\n        complex.positions[i * 6 + 5] = this.totalDistance;\n      }\n    }\n    complex.startIndex = complex.positions.length / 6;\n    return complex;\n  }\n  public simpleExtrude(points: number[][]) {\n    const complex = this.complex;\n    if (points.length <= 1) {\n      return complex;\n    }\n    this.lastFlip = -1;\n    this.started = false;\n    this.normal = null;\n    this.totalDistance = 0;\n\n    const total = points.length;\n    let count = complex.startIndex;\n    for (let i = 1; i < total; i++) {\n      const last = points[i - 1] as vec3;\n      const cur = points[i] as vec3;\n      const next = i < points.length - 1 ? points[i + 1] : null;\n      const amt = this.simpleSegment(complex, count, last, cur, next as vec3);\n      count += amt;\n    }\n\n    if (this.dash) {\n      for (let i = 0; i < complex.positions.length / 6; i++) {\n        complex.positions[i * 6 + 5] = this.totalDistance;\n      }\n    }\n    complex.startIndex = complex.positions.length / 6;\n    return complex;\n  }\n  private segment_gaode2(\n    complex: any,\n    index: number,\n    last: vec3,\n    cur: vec3,\n    next: vec3,\n    originLast: vec3,\n    originCur: vec3,\n    originNext: vec3,\n  ) {\n    let count = 0;\n    const indices = complex.indices;\n    const positions = complex.positions;\n    const normals = complex.normals;\n    const capSquare = this.cap === 'square';\n    const joinBevel = this.join === 'bevel';\n    const flatCur = aProjectFlat([originCur[0], originCur[1]]) as [\n      number,\n      number,\n    ];\n    const flatLast = aProjectFlat([originLast[0], originLast[1]]) as [\n      number,\n      number,\n    ];\n    // @ts-ignore\n    direction(lineA, cur as vec3, last as vec3);\n    let segmentDistance = 0;\n    if (this.dash) {\n      // @ts-ignore\n      segmentDistance = this.lineSegmentDistance(flatCur, flatLast);\n      this.totalDistance += segmentDistance;\n    }\n\n    if (!this.normal) {\n      this.normal = vec2.create();\n      computeNormal(this.normal, lineA);\n    }\n    if (!this.started) {\n      this.started = true;\n\n      // if the end cap is type square, we can just push the verts out a bit\n      if (capSquare) {\n        // vec2.scaleAndAdd(capEnd, last, lineA, -this.thickness);\n        const out1 = vec2.create();\n        const out2 = vec2.create();\n        vec2.add(out1, this.normal, lineA);\n        vec2.add(out2, this.normal, lineA);\n        normals.push(out2[0], out2[1], 0);\n        normals.push(out1[0], out1[1], 0);\n        positions.push(\n          last[0],\n          last[1],\n          last[2] | 0,\n          this.totalDistance - segmentDistance,\n          -this.thickness,\n          last[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          last[0],\n          last[1],\n          last[2] | 0,\n          this.totalDistance - segmentDistance,\n          this.thickness,\n          last[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          last,\n          this.normal,\n          this.thickness,\n          this.totalDistance - segmentDistance,\n        );\n      }\n    }\n\n    indices.push(index + 0, index + 1, index + 2);\n\n    if (!next) {\n      computeNormal(this.normal, lineA);\n      if (capSquare) {\n        const out1 = vec2.create();\n        const out2 = vec2.create();\n        vec2.sub(out2, lineA, this.normal);\n        vec2.add(out1, lineA, this.normal);\n\n        normals.push(out2[0], out2[1], 0);\n        normals.push(out1[0], out1[1], 0);\n\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          cur,\n          this.normal,\n          this.thickness,\n          this.totalDistance,\n        );\n      }\n      indices.push(\n        ...(this.lastFlip === 1\n          ? [index, index + 2, index + 3]\n          : [index + 2, index + 1, index + 3]),\n      );\n      count += 2;\n    } else {\n      // @ts-ignore\n      if (isPointEqual(cur as vec2, next as vec2)) {\n        vec2.add(\n          // @ts-ignore\n          next as vec2,\n          // @ts-ignore\n          cur as vec2,\n          vec2.normalize(\n            // @ts-ignore\n            next as vec2,\n            // @ts-ignore\n            vec2.subtract(next as vec2, cur as vec2, last as vec2),\n          ),\n        );\n      }\n      // @ts-ignore\n      direction(lineB, next as vec2, cur as vec2);\n      // stores tangent & miter\n\n      const [miterLen, miter] = computeMiter(\n        tangent,\n        vec2.create(),\n        lineA,\n        lineB,\n        this.thickness,\n      );\n      // normal(tmp, lineA)\n\n      // get orientation\n      let flip = vec2.dot(tangent, this.normal) < 0 ? -1 : 1;\n      let bevel = joinBevel;\n      if (!bevel && this.join === 'miter') {\n        const limit = miterLen;\n        if (limit > this.miterLimit) {\n          bevel = true;\n        }\n      }\n\n      if (bevel) {\n        normals.push(this.normal[0], this.normal[1], 0);\n        normals.push(miter[0], miter[1], 0);\n\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          -this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n        indices.push(\n          ...(this.lastFlip !== -flip\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3]),\n        );\n\n        // now add the bevel triangle\n        indices.push(index + 2, index + 3, index + 4);\n\n        computeNormal(tmp, lineB);\n        vec2.copy(this.normal, tmp); // store normal for next round\n        normals.push(this.normal[0], this.normal[1], 0);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          -this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n        count += 3;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          cur,\n          miter,\n          miterLen,\n          this.totalDistance,\n        );\n        indices.push(\n          ...(this.lastFlip === 1\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3]),\n        );\n\n        flip = -1;\n\n        // the miter is now the normal for our next join\n        vec2.copy(this.normal, miter);\n        count += 2;\n      }\n      this.lastFlip = flip;\n    }\n    return count;\n  }\n  private simpleSegment(\n    complex: any,\n    index: number,\n    last: vec3,\n    cur: vec3,\n    next: vec3,\n  ) {\n    let count = 0;\n    const indices = complex.indices;\n    const positions = complex.positions;\n    const normals = complex.normals;\n    const flatCur = aProjectFlat([cur[0], cur[1]]) as [number, number];\n    const flatLast = aProjectFlat([last[0], last[1]]) as [number, number];\n    // @ts-ignore\n    direction(lineA, flatCur, flatLast);\n    let segmentDistance = 0;\n    if (this.dash) {\n      // @ts-ignore\n      segmentDistance = this.lineSegmentDistance(flatCur, flatLast);\n      this.totalDistance += segmentDistance;\n    }\n\n    if (!this.normal) {\n      this.normal = vec2.create();\n      computeNormal(this.normal, lineA);\n    }\n    if (!this.started) {\n      this.started = true;\n\n      this.extrusions(\n        positions,\n        normals,\n        last,\n        this.normal,\n        this.thickness,\n        this.totalDistance - segmentDistance,\n      );\n    }\n\n    indices.push(index + 0, index + 1, index + 2);\n\n    if (!next) {\n      computeNormal(this.normal, lineA);\n      this.extrusions(\n        positions,\n        normals,\n        cur,\n        this.normal,\n        this.thickness,\n        this.totalDistance,\n      );\n\n      indices.push(\n        ...(this.lastFlip === 1\n          ? [index, index + 2, index + 3]\n          : [index + 2, index + 1, index + 3]),\n      );\n      count += 2;\n    } else {\n      const flatNext = aProjectFlat([next[0], next[1]]) as [number, number];\n      if (isPointEqual(flatCur, flatNext)) {\n        vec2.add(\n          flatNext,\n          flatCur,\n          vec2.normalize(flatNext, vec2.subtract(flatNext, flatCur, flatLast)),\n        );\n      }\n      direction(lineB, flatNext, flatCur);\n\n      // stores tangent & miter\n\n      const [miterLen, miter] = computeMiter(\n        tangent,\n        vec2.create(),\n        lineA,\n        lineB,\n        this.thickness,\n      );\n      // normal(tmp, lineA)\n\n      // get orientation\n      let flip = vec2.dot(tangent, this.normal) < 0 ? -1 : 1;\n      this.extrusions(\n        positions,\n        normals,\n        cur,\n        miter,\n        miterLen,\n        this.totalDistance,\n      );\n      indices.push(\n        ...(this.lastFlip === 1\n          ? [index, index + 2, index + 3]\n          : [index + 2, index + 1, index + 3]),\n      );\n\n      flip = -1;\n\n      // the miter is now the normal for our next join\n      vec2.copy(this.normal, miter);\n      count += 2;\n      this.lastFlip = flip;\n    }\n    return count;\n  }\n  private segment(\n    complex: any,\n    index: number,\n    last: vec3,\n    cur: vec3,\n    next: vec3,\n  ) {\n    let count = 0;\n    const indices = complex.indices;\n    const positions = complex.positions;\n    const normals = complex.normals;\n    const capSquare = this.cap === 'square';\n    const joinBevel = this.join === 'bevel';\n    const flatCur = aProjectFlat([cur[0], cur[1]]) as [number, number];\n    const flatLast = aProjectFlat([last[0], last[1]]) as [number, number];\n    // @ts-ignore\n    direction(lineA, flatCur, flatLast);\n    let segmentDistance = 0;\n    if (this.dash) {\n      // @ts-ignore\n      segmentDistance = this.lineSegmentDistance(flatCur, flatLast);\n      this.totalDistance += segmentDistance;\n    }\n\n    if (!this.normal) {\n      this.normal = vec2.create();\n      computeNormal(this.normal, lineA);\n    }\n    if (!this.started) {\n      this.started = true;\n\n      // if the end cap is type square, we can just push the verts out a bit\n      if (capSquare) {\n        // vec2.scaleAndAdd(capEnd, last, lineA, -this.thickness);\n        const out1 = vec2.create();\n        const out2 = vec2.create();\n        vec2.add(out1, this.normal, lineA);\n        vec2.add(out2, this.normal, lineA);\n        normals.push(out2[0], out2[1], 0);\n        normals.push(out1[0], out1[1], 0);\n        positions.push(\n          last[0],\n          last[1],\n          last[2] | 0,\n          this.totalDistance - segmentDistance,\n          -this.thickness,\n          last[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          last[0],\n          last[1],\n          last[2] | 0,\n          this.totalDistance - segmentDistance,\n          this.thickness,\n          last[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n        // this.extrusions(positions, normals, last, out, this.thickness);\n        // last = capEnd;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          last,\n          this.normal,\n          this.thickness,\n          this.totalDistance - segmentDistance,\n        );\n      }\n    }\n\n    indices.push(index + 0, index + 1, index + 2);\n\n    if (!next) {\n      computeNormal(this.normal, lineA);\n      if (capSquare) {\n        // vec2.scaleAndAdd(capEnd, cur, lineA, this.thickness);\n        // cur = capEnd;\n        const out1 = vec2.create();\n        const out2 = vec2.create();\n        vec2.sub(out2, lineA, this.normal);\n        vec2.add(out1, lineA, this.normal);\n        // this.extrusions(positions, normals, cur, out, this.thickness);\n        normals.push(out2[0], out2[1], 0);\n        normals.push(out1[0], out1[1], 0);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          cur,\n          this.normal,\n          this.thickness,\n          this.totalDistance,\n        );\n      }\n\n      // this.extrusions(positions, normals, cur, this.normal, this.thickness);\n      indices.push(\n        ...(this.lastFlip === 1\n          ? [index, index + 2, index + 3]\n          : [index + 2, index + 1, index + 3]),\n      );\n      count += 2;\n    } else {\n      const flatNext = aProjectFlat([next[0], next[1]]) as [number, number];\n      if (isPointEqual(flatCur, flatNext)) {\n        vec2.add(\n          flatNext,\n          flatCur,\n          vec2.normalize(flatNext, vec2.subtract(flatNext, flatCur, flatLast)),\n        );\n      }\n      direction(lineB, flatNext, flatCur);\n\n      // stores tangent & miter\n\n      const [miterLen, miter] = computeMiter(\n        tangent,\n        vec2.create(),\n        lineA,\n        lineB,\n        this.thickness,\n      );\n      // normal(tmp, lineA)\n\n      // get orientation\n      let flip = vec2.dot(tangent, this.normal) < 0 ? -1 : 1;\n      let bevel = joinBevel;\n      if (!bevel && this.join === 'miter') {\n        const limit = miterLen;\n        if (limit > this.miterLimit) {\n          bevel = true;\n        }\n      }\n\n      if (bevel) {\n        normals.push(this.normal[0], this.normal[1], 0);\n        normals.push(miter[0], miter[1], 0);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          -this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n        indices.push(\n          ...(this.lastFlip !== -flip\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3]),\n        );\n\n        // now add the bevel triangle\n        indices.push(index + 2, index + 3, index + 4);\n\n        computeNormal(tmp, lineB);\n        vec2.copy(this.normal, tmp); // store normal for next round\n        normals.push(this.normal[0], this.normal[1], 0);\n        positions.push(\n          cur[0],\n          cur[1],\n          cur[2] | 0,\n          this.totalDistance,\n          -this.thickness * flip,\n          cur[2] | 0,\n        );\n        this.complex.indexes.push(this.currentIndex);\n        this.currentIndex++;\n        count += 3;\n      } else {\n        this.extrusions(\n          positions,\n          normals,\n          cur,\n          miter,\n          miterLen,\n          this.totalDistance,\n        );\n        indices.push(\n          ...(this.lastFlip === 1\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3]),\n        );\n\n        flip = -1;\n\n        // the miter is now the normal for our next join\n        vec2.copy(this.normal, miter);\n        count += 2;\n      }\n      this.lastFlip = flip;\n    }\n    return count;\n  }\n  private extrusions(\n    positions: number[],\n    normals: number[],\n    point: vec3, // 顶点\n    normal: vec2, // 法向量\n    thickness: number, // 高度\n    distanceRadio: number,\n  ) {\n    normals.push(normal[0], normal[1], 0);\n    normals.push(normal[0], normal[1], 0);\n    positions.push(\n      point[0],\n      point[1],\n      point[2] | 0,\n      distanceRadio,\n      -thickness,\n      point[2] | 0,\n    );\n    this.complex.indexes.push(this.currentIndex);\n    positions.push(\n      point[0],\n      point[1],\n      point[2] | 0,\n      distanceRadio,\n      thickness,\n      point[2] | 0,\n    );\n    this.complex.indexes.push(this.currentIndex);\n    this.currentIndex++;\n  }\n  private lineSegmentDistance(b1: vec3, a1: vec3) {\n    const dx = a1[0] - b1[0];\n    const dy = a1[1] - b1[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}\n"],"file":"extrude_polyline.js"}