{"version":3,"sources":["../../../src/Geometry/models/plane.ts"],"names":["PlaneModel","layer","getLayerConfig","width","height","widthSegments","heightSegments","center","terrainTexture","initPlane","indices","positions","loadTerrainTexture","vertices","size","lng","lat","widthHalf","heightHalf","gridX","Math","floor","gridY","gridX1","gridY1","segmentWidth","segmentHeight","iy","y","ix","x","mapService","version","Version","lngLatToCoord","a","b","push","c","d","opacity","mapTexture","terrainClipHeight","texture","destroy","updateTexture","u_opacity","u_mapFlag","u_terrainClipHeight","u_texture","terrainImage","mask","maskInside","createTexture2D","rendererService","buildLayerModel","moduleName","vertexShader","planeVert","fragmentShader","planeFrag","triangulation","planeGeometryTriangulation","primitive","gl","TRIANGLES","depth","enable","blend","getBlend","stencil","cull","face","BACK","initModels","options","oldwidthSegments","oldheightSegments","oldwidth","oldheight","style","undefined","oldFeatures","getEncodedData","res","styleAttributeService","createAttributesAndIndices","img","Image","crossOrigin","onload","data","wrapS","CLAMP_TO_EDGE","wrapT","layerService","updateLayerRenderList","renderLayers","src","canvas","document","createElement","ctx","getContext","drawImage","imageData","getImageData","image","rgb2height","imgWidth","imgHeight","widthStep","heihgtStep","imgIndexY","imgLen","imgIndexX","imgDataIndex","r","g","z","modelData","updateModelData","terrainImageLoaded","translateVertex","setTimeout","emit","properties","type","minimum","maximum","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","FLOAT","update","feature","featureIdx","vertex","attributeIdx","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAttrubuteAndElements,\n  IEncodeFeature,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { Version } from '@antv/l7-maps';\nimport { getMask, isMini } from '@antv/l7-utils';\n// import { mat4, vec3 } from 'gl-matrix';\nimport BaseModel from '../../core/BaseModel';\nimport { IGeometryLayerStyleOptions } from '../../core/interface';\nimport planeFrag from '../shaders/plane_frag.glsl';\nimport planeVert from '../shaders/plane_vert.glsl';\n\nexport default class PlaneModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected terrainImage: HTMLImageElement;\n  protected terrainImageLoaded: boolean = false;\n  protected mapTexture: string | undefined;\n\n  public initPlane(\n    width = 1,\n    height = 1,\n    widthSegments = 1,\n    heightSegments = 1,\n    lng = 120,\n    lat = 30,\n  ) {\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n\n    const segmentWidth = width / gridX;\n    const segmentHeight = height / gridY;\n\n    const indices = [];\n    const positions = [];\n\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segmentHeight - heightHalf;\n\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segmentWidth - widthHalf;\n        if (this.mapService.version === Version['GAODE2.x']) {\n          // @ts-ignore\n          const [a, b] = this.mapService.lngLatToCoord([x + lng, -y + lat]) as [\n            number,\n            number,\n          ];\n          positions.push(a, b, 0);\n        } else {\n          positions.push(x + lng, -y + lat, 0);\n        }\n\n        positions.push(ix / gridX);\n        positions.push(1 - iy / gridY);\n      }\n    }\n\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return { indices, positions };\n  }\n\n  public planeGeometryTriangulation = () => {\n    const {\n      width = 1,\n      height = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      center = [120, 30],\n      terrainTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    const { indices, positions } = this.initPlane(\n      width,\n      height,\n      widthSegments,\n      heightSegments,\n      ...center,\n    );\n    if (terrainTexture) {\n      // 存在地形贴图的时候会根据地形贴图对顶点进行偏移\n      this.loadTerrainTexture(positions, indices);\n    }\n\n    return {\n      vertices: positions,\n      indices,\n      size: 5,\n    };\n  };\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      mapTexture,\n      terrainClipHeight = 0,\n      terrainTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    if (this.mapTexture !== mapTexture) {\n      this.mapTexture = mapTexture;\n      this.texture?.destroy();\n      this.updateTexture(mapTexture);\n    }\n    return {\n      u_opacity: opacity || 1,\n      u_mapFlag: mapTexture ? 1 : 0,\n      u_terrainClipHeight: terrainTexture ? terrainClipHeight : -1,\n      u_texture: this.texture,\n    };\n  }\n\n  public clearModels(): void {\n    // @ts-ignore\n    this.terrainImage = null;\n    this.texture?.destroy();\n  }\n\n  public initModels() {\n    const {\n      mask = false,\n      maskInside = true,\n      mapTexture,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    this.mapTexture = mapTexture;\n\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n\n    this.updateTexture(mapTexture);\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'geometry_plane',\n        vertexShader: planeVert,\n        fragmentShader: planeFrag,\n        triangulation: this.planeGeometryTriangulation,\n        primitive: gl.TRIANGLES,\n        // primitive: gl.LINES,\n        depth: { enable: true },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n        cull: {\n          enable: true,\n          face: gl.BACK, // gl.FRONT | gl.BACK;\n        },\n      }),\n    ];\n  }\n\n  public buildModels() {\n    return this.initModels();\n  }\n\n  public createModelData(options?: any) {\n    if (options) {\n      const {\n        widthSegments: oldwidthSegments,\n        heightSegments: oldheightSegments,\n        width: oldwidth,\n        height: oldheight,\n      } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n      const {\n        widthSegments,\n        heightSegments,\n        width,\n        height,\n      } = options as IGeometryLayerStyleOptions;\n      this.layer.style({\n        widthSegments:\n          widthSegments !== undefined ? widthSegments : oldwidthSegments,\n        heightSegments:\n          heightSegments !== undefined ? heightSegments : oldheightSegments,\n        width: width !== undefined ? width : oldwidth,\n        height: height !== undefined ? height : oldheight,\n      });\n    }\n    const oldFeatures = this.layer.getEncodedData();\n    const res = this.styleAttributeService.createAttributesAndIndices(\n      oldFeatures,\n      this.planeGeometryTriangulation,\n    );\n    return res;\n  }\n\n  public updateTexture(mapTexture: string | undefined): void {\n    const { createTexture2D } = this.rendererService;\n\n    if (mapTexture) {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = () => {\n        this.texture = createTexture2D({\n          data: img,\n          width: img.width,\n          height: img.height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE,\n        });\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      };\n      img.src = mapTexture;\n    } else {\n      this.texture = createTexture2D({\n        width: 0,\n        height: 0,\n      });\n    }\n  }\n\n  protected getImageData(img: HTMLImageElement) {\n    const canvas: HTMLCanvasElement = document.createElement('canvas');\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    const { width, height } = img;\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, width, height);\n    const imageData = ctx.getImageData(0, 0, width, height);\n\n    return imageData;\n  }\n\n  protected translateVertex(\n    positions: number[],\n    indices: number[],\n    image: HTMLImageElement,\n    widthSegments: number,\n    heightSegments: number,\n    rgb2height: (r: number, g: number, b: number) => number,\n  ) {\n    const imgWidth = image.width;\n    const imgHeight = image.height;\n    const imageData = this.getImageData(image).data;\n\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n\n    const widthStep = imgWidth / gridX;\n    const heihgtStep = imgHeight / gridY;\n\n    for (let iy = 0; iy < gridY1; iy++) {\n      const imgIndexY = Math.floor(iy * heihgtStep);\n      const imgLen = imgIndexY * imgWidth;\n\n      for (let ix = 0; ix < gridX1; ix++) {\n        const imgIndexX = Math.floor(ix * widthStep);\n        const imgDataIndex = (imgLen + imgIndexX) * 4;\n\n        const r = imageData[imgDataIndex];\n        const g = imageData[imgDataIndex + 1];\n        const b = imageData[imgDataIndex + 2];\n\n        const z = (iy * gridX1 + ix) * 5 + 2;\n        positions[z] = rgb2height(r, g, b);\n      }\n    }\n\n    const oldFeatures = this.layer.getEncodedData();\n    const modelData = this.styleAttributeService.createAttributesAndIndices(\n      oldFeatures,\n      () => {\n        return {\n          vertices: positions,\n          indices,\n          size: 5,\n        };\n      },\n    );\n    this.layer.updateModelData(modelData as IAttrubuteAndElements);\n    this.layerService.renderLayers();\n  }\n\n  /**\n   * load terrain texture & offset attribute z\n   */\n  protected loadTerrainTexture(positions: number[], indices: number[]) {\n    const {\n      widthSegments = 1,\n      heightSegments = 1,\n      terrainTexture,\n      rgb2height = (r: number, g: number, b: number) => r + g + b,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    if (this.terrainImage) {\n      // 若当前已经存在 image，直接进行偏移计算（LOD）\n      if (this.terrainImageLoaded) {\n        this.translateVertex(\n          positions,\n          indices,\n          this.terrainImage,\n          widthSegments,\n          heightSegments,\n          rgb2height,\n        );\n      } else {\n        this.terrainImage.onload = () => {\n          this.translateVertex(\n            positions,\n            indices,\n            this.terrainImage,\n            widthSegments,\n            heightSegments,\n            rgb2height,\n          );\n        };\n      }\n    } else {\n      // 加载地形贴图、根据地形贴图对 planeGeometry 进行偏移\n      const terrainImage = new Image();\n      this.terrainImage = terrainImage;\n      terrainImage.crossOrigin = 'anonymous';\n      terrainImage.onload = () => {\n        this.terrainImageLoaded = true;\n        // 图片加载完，触发事件，可以进行地形图的顶点计算存储\n        setTimeout(() => this.layer.emit('terrainImageLoaded', null));\n        this.translateVertex(\n          positions,\n          indices,\n          terrainImage,\n          widthSegments,\n          heightSegments,\n          rgb2height,\n        );\n      };\n      terrainImage.src = terrainTexture as string;\n    }\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"],"file":"plane.js"}