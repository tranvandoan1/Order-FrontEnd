"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Core = require("@antv/l7-core");

var _l7Utils = require("@antv/l7-utils");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var planeFrag = "\nuniform sampler2D u_texture;\nuniform float u_opacity;\n\nvarying vec3 v_Color;\nvarying vec2 v_uv;\n\n#pragma include \"picking\"\nvoid main() {\n  gl_FragColor = texture2D(u_texture, vec2(v_uv.x, 1.0 - v_uv.y));\n  gl_FragColor.a *= u_opacity;\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
var planeVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform float u_raisingHeight: 0.0;\nuniform mat4 u_Mvp;\nuniform float u_opacity;\nuniform vec2 u_size: [1.0, 1.0];\nuniform mat2 u_RotateMatrix;\n\nattribute vec3 a_Extrude;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nattribute vec3 a_Color;\n\nvarying vec3 v_Color;\nvarying vec2 v_uv;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\nvoid main() {\n   vec3 extrude = a_Extrude;\n   v_Color = a_Color;\n   v_uv = a_Uv;\n\n   float raiseHeight = u_raisingHeight;\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\n      raiseHeight = u_raisingHeight * mapboxZoomScale;\n   }\n\n   // \u8BA1\u7B97\u7ECF\u7EAC\u5EA6\u70B9\u4F4D\u5750\u6807\n   vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\n\n   // \u8BA1\u7B97\u7ED5 z \u8F74\u65CB\u8F6C\u540E\u7684\u504F\u79FB\n   vec2 offsetXY = project_pixel(u_RotateMatrix * vec2(extrude.x * u_size.x, 0.0));\n   // \u7ED5 z \u8F74\u65CB\u8F6C\n   float x = project_pos.x + offsetXY.x;\n   float y = project_pos.y + offsetXY.y;\n   // z \u8F74\u4E0D\u53C2\u4E0E\u65CB\u8F6C\n   float z = project_pixel(extrude.y * u_size.y + raiseHeight);\n\n\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      // gl_Position = u_Mvp * (vec4(project_pos.xy, a_Position.z, 1.0));\n      gl_Position = u_Mvp * (vec4(x, y, z, 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(x , y, z , 1.0));\n   }\n\n   setPickingColor(a_PickingColor);\n}\n";

var BillBoardModel = function (_BaseModel) {
  (0, _inherits2.default)(BillBoardModel, _BaseModel);

  var _super = _createSuper(BillBoardModel);

  function BillBoardModel() {
    var _this;

    (0, _classCallCheck2.default)(this, BillBoardModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "texture", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "radian", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "planeGeometryTriangulation", function () {
      var _ref = _this.layer.getLayerConfig(),
          _ref$center = _ref.center,
          center = _ref$center === void 0 ? [120, 30] : _ref$center;

      return {
        size: 4,
        indices: [0, 1, 2, 2, 3, 0],
        vertices: [].concat((0, _toConsumableArray2.default)(center), [1, 1], (0, _toConsumableArray2.default)(center), [0, 1], (0, _toConsumableArray2.default)(center), [0, 0], (0, _toConsumableArray2.default)(center), [1, 0])
      };
    });
    return _this;
  }

  (0, _createClass2.default)(BillBoardModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref2 = this.layer.getLayerConfig(),
          opacity = _ref2.opacity,
          _ref2$width = _ref2.width,
          width = _ref2$width === void 0 ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? 1 : _ref2$height,
          _ref2$raisingHeight = _ref2.raisingHeight,
          raisingHeight = _ref2$raisingHeight === void 0 ? 0 : _ref2$raisingHeight;

      var rotateFlag = 1;

      if (this.mapService.version === 'GAODE2.x' || this.mapService.version === 'GAODE1.x') {
        rotateFlag = -1;
      }

      this.radian = rotateFlag * Math.PI * (this.mapService.getRotation() % 360) / 180;
      return {
        u_raisingHeight: Number(raisingHeight),
        u_RotateMatrix: new Float32Array([Math.cos(this.radian), Math.sin(this.radian), -Math.sin(this.radian), Math.cos(this.radian)]),
        u_opacity: opacity || 1,
        u_texture: this.texture,
        u_size: [width, height]
      };
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;

      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _ref3 = this.layer.getLayerConfig(),
          _ref3$mask = _ref3.mask,
          mask = _ref3$mask === void 0 ? false : _ref3$mask,
          _ref3$maskInside = _ref3.maskInside,
          maskInside = _ref3$maskInside === void 0 ? true : _ref3$maskInside,
          drawCanvas = _ref3.drawCanvas;

      var createTexture2D = this.rendererService.createTexture2D;
      this.texture = createTexture2D({
        height: 0,
        width: 0
      });

      if (drawCanvas) {
        this.updateTexture(drawCanvas);
      }

      return [this.layer.buildLayerModel({
        moduleName: 'geometry_billboard',
        vertexShader: planeVert,
        fragmentShader: planeFrag,
        triangulation: this.planeGeometryTriangulation,
        primitive: _l7Core.gl.TRIANGLES,
        depth: {
          enable: true
        },
        blend: this.getBlend(),
        stencil: (0, _l7Utils.getMask)(mask, maskInside)
      })];
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return this.initModels();
    }
  }, {
    key: "updateTexture",
    value: function updateTexture(drawCanvas) {
      var createTexture2D = this.rendererService.createTexture2D;

      var _ref4 = this.layer.getLayerConfig(),
          _ref4$canvasWidth = _ref4.canvasWidth,
          canvasWidth = _ref4$canvasWidth === void 0 ? 1 : _ref4$canvasWidth,
          _ref4$canvasHeight = _ref4.canvasHeight,
          canvasHeight = _ref4$canvasHeight === void 0 ? 1 : _ref4$canvasHeight;

      var canvas = document.createElement('canvas');
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      var ctx = canvas.getContext('2d');

      if (ctx) {
        drawCanvas(canvas);
        this.texture = createTexture2D({
          data: canvas,
          width: canvas.width,
          height: canvas.height,
          wrapS: _l7Core.gl.CLAMP_TO_EDGE,
          wrapT: _l7Core.gl.CLAMP_TO_EDGE
        });
        this.layerService.updateLayerRenderList();
        this.layerService.renderLayers();
      }
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'extrude',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Extrude',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];
            var extrudeIndex = attributeIdx % 4 * 3;
            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            return [vertex[2], vertex[3]];
          }
        }
      });
    }
  }]);
  return BillBoardModel;
}(_BaseModel2.default);

exports.default = BillBoardModel;
//# sourceMappingURL=billboard.js.map