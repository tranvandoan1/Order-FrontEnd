{"version":3,"sources":["../../../src/Geometry/models/sprite.ts"],"names":["SPRITE_ANIMATE_DIR","SpriteModel","updateZ","spriteUpdate","bottomZ","topZ","spriteTop","i","positions","length","spriteAnimate","UP","vertices","indices","size","attributes","layer","createAttrubutes","triangulation","planeGeometryUpdateTriangulation","models","map","m","updateAttributes","renderLayers","timer","requestAnimationFrame","updateModel","getLayerConfig","center","spriteCount","spriteRadius","initSprite","radius","lng","lat","mapService","heightLimit","height","Math","random","push","getPos","z","randomX","randomY","x","y","version","Version","lngLatToCoord","a","b","opacity","mapTexture","spriteScale","texture","destroy","updateTexture","u_opacity","u_mapFlag","u_texture","u_Scale","cancelAnimationFrame","DOWN","createTexture2D","rendererService","width","setTimeout","buildLayerModel","moduleName","vertexShader","spriteVert","fragmentShader","spriteFrag","planeGeometryTriangulation","primitive","gl","POINTS","depth","enable","blend","getBlend","initModels","img","Image","crossOrigin","onload","data","wrapS","CLAMP_TO_EDGE","wrapT","layerService","updateLayerRenderList","src","properties","type","minimum","maximum","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IEncodeFeature,\n  ILayerConfig,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { Version } from '@antv/l7-maps';\n\nimport BaseModel from '../../core/BaseModel';\nimport { IGeometryLayerStyleOptions } from '../../core/interface';\nimport spriteFrag from '../shaders/sprite_frag.glsl';\nimport spriteVert from '../shaders/sprite_vert.glsl';\n\nenum SPRITE_ANIMATE_DIR {\n  'UP' = 'up',\n  'DOWN' = 'down',\n}\n\nexport default class SpriteModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected mapTexture: string | undefined;\n  protected positions: number[];\n  protected indices: number[];\n  protected timer: number;\n  protected spriteTop: number;\n  protected spriteUpdate: number;\n  protected spriteAnimate: SPRITE_ANIMATE_DIR;\n\n  public initSprite(radius = 10, spriteCount = 100, lng = 120, lat = 30) {\n    const indices = [];\n    const positions = [];\n    const mapService = this.mapService;\n    const heightLimit =\n      this.spriteAnimate === SPRITE_ANIMATE_DIR.UP\n        ? -this.spriteTop\n        : this.spriteTop;\n    for (let i = 0; i < spriteCount; i++) {\n      const height = Math.random() * heightLimit;\n      positions.push(...getPos(height));\n    }\n    for (let i = 0; i < spriteCount; i++) {\n      indices.push(i);\n    }\n\n    function getPos(z: number) {\n      const randomX = radius * Math.random();\n      const randomY = radius * Math.random();\n      const x = -radius / 2 + randomX;\n      const y = -radius / 2 + randomY;\n      if (mapService.version === Version['GAODE2.x']) {\n        // @ts-ignore\n        const [a, b] = mapService.lngLatToCoord([x + lng, -y + lat]) as [\n          number,\n          number,\n        ];\n        return [a, b, z, 0, 0];\n      } else {\n        return [x + lng, -y + lat, z, 0, 0];\n      }\n    }\n\n    return { indices, positions };\n  }\n\n  public planeGeometryUpdateTriangulation = () => {\n    const updateZ = this.spriteUpdate;\n    const bottomZ = -100000;\n    const topZ = this.spriteTop;\n\n    for (let i = 0; i < this.positions.length; i += 5) {\n      if (this.spriteAnimate === SPRITE_ANIMATE_DIR.UP) {\n        this.positions[i + 2] += updateZ;\n        if (this.positions[i + 2] > topZ) {\n          this.positions[i + 2] = bottomZ;\n        }\n      } else {\n        this.positions[i + 2] -= updateZ;\n        if (this.positions[i + 2] < bottomZ) {\n          this.positions[i + 2] = topZ;\n        }\n      }\n    }\n\n    return {\n      vertices: this.positions,\n      indices: this.indices,\n      size: 5,\n    };\n  };\n\n  public updateModel = () => {\n    // @ts-ignore\n    const attributes = this.layer.createAttrubutes({\n      triangulation: this.planeGeometryUpdateTriangulation,\n    });\n    this.layer.models.map((m) => {\n      m.updateAttributes(attributes);\n    });\n    this.layer.renderLayers();\n\n    this.timer = requestAnimationFrame(this.updateModel);\n  };\n\n  public planeGeometryTriangulation = () => {\n    const {\n      center = [120, 30],\n      spriteCount = 100,\n      spriteRadius = 10,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n\n    const { indices, positions } = this.initSprite(\n      spriteRadius,\n      spriteCount,\n      ...center,\n    );\n    this.positions = positions;\n    this.indices = indices;\n    return {\n      vertices: positions,\n      indices,\n      size: 5,\n    };\n  };\n\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      mapTexture,\n      spriteScale = 1,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    if (this.mapTexture !== mapTexture) {\n      this.mapTexture = mapTexture;\n      this.texture?.destroy();\n      this.updateTexture(mapTexture);\n    }\n    return {\n      u_opacity: opacity || 1,\n      u_mapFlag: mapTexture ? 1 : 0,\n      u_texture: this.texture,\n      u_Scale: spriteScale,\n    };\n  }\n\n  public clearModels(): void {\n    cancelAnimationFrame(this.timer);\n    this.texture?.destroy();\n  }\n\n  public initModels() {\n    const {\n      mapTexture,\n      spriteTop = 5000000,\n      spriteUpdate = 10000,\n      spriteAnimate = SPRITE_ANIMATE_DIR.DOWN,\n    } = this.layer.getLayerConfig() as IGeometryLayerStyleOptions;\n    this.mapTexture = mapTexture;\n    this.spriteTop = spriteTop;\n    this.spriteUpdate = spriteUpdate;\n    spriteAnimate === 'up'\n      ? (this.spriteAnimate = SPRITE_ANIMATE_DIR.UP)\n      : (this.spriteAnimate = SPRITE_ANIMATE_DIR.DOWN);\n\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n\n    this.updateTexture(mapTexture);\n\n    setTimeout(() => {\n      this.updateModel();\n    }, 100);\n\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'geometry_sprite',\n        vertexShader: spriteVert,\n        fragmentShader: spriteFrag,\n        triangulation: this.planeGeometryTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  public buildModels() {\n    return this.initModels();\n  }\n\n  public updateTexture(mapTexture: string | undefined): void {\n    const { createTexture2D } = this.rendererService;\n\n    if (mapTexture) {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = () => {\n        this.texture = createTexture2D({\n          data: img,\n          width: img.width,\n          height: img.height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE,\n        });\n        this.layerService.updateLayerRenderList();\n        this.layerService.renderLayers();\n      };\n      img.src = mapTexture;\n    } else {\n      this.texture = createTexture2D({\n        width: 0,\n        height: 0,\n      });\n    }\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    return '';\n  }\n}\n"],"file":"sprite.js"}