"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _l7Core = require("@antv/l7-core");

var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));

var _image = _interopRequireDefault(require("../../image"));

var _line = _interopRequireDefault(require("../../line"));

var _point = _interopRequireDefault(require("../../point"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var RasterTileModel = function (_BaseModel) {
  (0, _inherits2.default)(RasterTileModel, _BaseModel);

  var _super = _createSuper(RasterTileModel);

  function RasterTileModel() {
    var _this;

    (0, _classCallCheck2.default)(this, RasterTileModel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initedTileset", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tilesetManager", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "showGrid", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subGridLayer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subTextLayer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastViewStates", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "timer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderSubLayers", function () {
      if (!_this.tilesetManager) {
        return;
      }

      var rasteTileLayer = _this.layer;

      _this.tilesetManager.tiles.filter(function (tile) {
        return tile.isLoaded;
      }).map(function (tile) {
        if (!tile.layer) {
          tile.layer = _this.creatSubLayer(tile);
          rasteTileLayer.addChild(tile.layer);
        } else {
          tile.layer.updateLayerConfig({
            visible: tile.isVisible
          });
        }

        return tile.layer;
      });

      if (_this.showGrid) {
        if (!rasteTileLayer.hasChild(_this.subGridLayer)) {
          rasteTileLayer.addChild(_this.subGridLayer);
        }

        if (!rasteTileLayer.hasChild(_this.subTextLayer)) {
          rasteTileLayer.addChild(_this.subTextLayer);
        }
      }

      _this.layerService.renderLayers();

      if (_this.tilesetManager.isLoaded) {
        rasteTileLayer.emit('tiles-loaded', _this.tilesetManager.currentTiles);
      }
    });
    return _this;
  }

  (0, _createClass2.default)(RasterTileModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      return {};
    }
  }, {
    key: "initModels",
    value: function initModels() {
      var _this$tilesetManager;

      var source = this.layer.getSource();
      this.tilesetManager = source.tileset;

      if (!this.initedTileset) {
        this.bindTilesetEvent();
        this.initedTileset = true;
      }

      var _this$getCurrentView = this.getCurrentView(),
          latLonBounds = _this$getCurrentView.latLonBounds,
          zoom = _this$getCurrentView.zoom;

      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 ? void 0 : _this$tilesetManager.update(zoom, latLonBounds);

      if (this.showGrid) {
        this.renderSubGridLayer();
      }

      return this.buildModels();
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [];
    }
  }, {
    key: "clearModels",
    value: function clearModels() {}
  }, {
    key: "renderSubGridLayer",
    value: function renderSubGridLayer() {
      if (!this.tilesetManager) {
        return;
      }

      var features = this.tilesetManager.currentTiles.map(function (tile) {
        return tile.bboxPolygon;
      });
      var data = {
        type: 'FeatureCollection',
        features: features
      };

      if (this.subGridLayer) {
        this.subGridLayer.setData(data);
        this.subTextLayer.setData(data);
        return;
      }

      this.subGridLayer = new _line.default({
        autoFit: false
      }).source(data).size(1).color('red').shape('simple').style({
        lineType: 'dash',
        dashArray: [1, 2]
      });
      this.subTextLayer = new _point.default({
        autoFit: false
      }).source(data).size(14).color('red').shape('meta', 'text').style({
        opacity: 1,
        strokeWidth: 1,
        stroke: '#fff'
      });
      this.subGridLayer.setContainer((0, _l7Core.createLayerContainer)(this.layer.sceneContainer), this.layer.sceneContainer);
      this.subTextLayer.setContainer((0, _l7Core.createLayerContainer)(this.layer.sceneContainer), this.layer.sceneContainer);
      this.subGridLayer.init();
      this.subTextLayer.init();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {}
  }, {
    key: "bindTilesetEvent",
    value: function bindTilesetEvent() {
      var _this2 = this;

      if (!this.tilesetManager) {
        return;
      }

      this.tilesetManager.on('tile-loaded', function (tile) {});
      this.tilesetManager.on('tile-unload', function (tile) {
        _this2.destroySubLayer(tile);
      });
      this.tilesetManager.on('tile-error', function (error, tile) {});
      this.tilesetManager.on('tile-update', this.renderSubLayers);
      this.mapService.on('mapchange', function (e) {
        var _this2$getCurrentView = _this2.getCurrentView(),
            latLonBounds = _this2$getCurrentView.latLonBounds,
            zoom = _this2$getCurrentView.zoom;

        if (_this2.mapService.version === 'GAODE1.x') {
          var _this2$layer$getLayer = _this2.layer.getLayerConfig(),
              visible = _this2$layer$getLayer.visible;

          if (zoom < 3 && visible) {
            _this2.layer.updateLayerConfig({
              visible: false
            });

            _this2.layerService.updateLayerRenderList();
          } else if (zoom >= 3 && !visible) {
            _this2.layer.updateLayerConfig({
              visible: true
            });

            _this2.layerService.updateLayerRenderList();
          }
        }

        if (_this2.lastViewStates && _this2.lastViewStates.zoom === zoom && _this2.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
          return;
        }

        _this2.lastViewStates = {
          zoom: zoom,
          latLonBounds: latLonBounds
        };

        if (_this2.timer) {
          clearTimeout(_this2.timer);
          _this2.timer = null;
        }

        _this2.timer = setTimeout(function () {
          var _this2$tilesetManager;

          (_this2$tilesetManager = _this2.tilesetManager) === null || _this2$tilesetManager === void 0 ? void 0 : _this2$tilesetManager.update(zoom, latLonBounds);

          if (_this2.showGrid) {
            _this2.renderSubGridLayer();
          }
        }, 250);
      });
    }
  }, {
    key: "creatSubLayer",
    value: function creatSubLayer(tile) {
      var _ref = this.layer.getLayerConfig(),
          _ref$opacity = _ref.opacity,
          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
          _ref$zIndex = _ref.zIndex,
          zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex;

      var layer = new _image.default({
        visible: tile.isVisible,
        zIndex: zIndex
      }).source(tile.data, {
        parser: {
          type: 'image',
          extent: tile.bounds
        }
      }).style({
        opacity: opacity
      });
      var container = (0, _l7Core.createLayerContainer)(this.layer.sceneContainer);
      layer.setContainer(container, this.layer.sceneContainer);
      layer.init();
      return layer;
    }
  }, {
    key: "destroySubLayer",
    value: function destroySubLayer(tile) {
      if (tile.layer) {
        var layerGroup = this.layer;
        layerGroup.removeChild(tile.layer);
      }
    }
  }, {
    key: "getCurrentView",
    value: function getCurrentView() {
      var bounds = this.mapService.getBounds();
      var latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];
      var zoom = this.mapService.getZoom();
      return {
        latLonBounds: latLonBounds,
        zoom: zoom
      };
    }
  }]);
  return RasterTileModel;
}(_BaseModel2.default);

exports.default = RasterTileModel;
//# sourceMappingURL=raste-tile.js.map