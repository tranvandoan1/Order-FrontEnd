{"version":3,"sources":["../../src/plugins/DataMappingPlugin.ts"],"names":["DataMappingPlugin","TYPES","IGlobalConfigService","IMapService","IFontService","layer","styleAttributeService","hooks","init","tap","generateMaping","beforeRenderData","dataState","dataMappingNeedUpdate","beforeRender","layerModelNeedUpdate","bottomColor","getBottomColor","attributes","getLayerStyleAttributes","filter","getLayerStyleAttribute","dataArray","getSource","data","attributesToRemapping","attribute","needRemapping","filterData","scale","record","applyAttributeMapping","length","setEncodedData","mapping","undefined","getEncodedData","emit","p1","p2","dir","normalizeDir","arrowPoint","predata","minimumColor","getLayerConfig","arrow","enable","mappedData","map","i","preRecord","encodeRecord","id","_id","coordinates","forEach","values","name","c","Array","isArray","shape","fontService","getIconFontKey","coords","getArrowPoints","splice","adjustData2Amap2Coordinates","adjustData2SimpleCoordinates","mapService","version","Version","layerCenter","getLayerCenter","d","originCoordinates","lngLatToCoordByLayer","lngLatToCoordsByLayer","source","center","SIMPLE","simpleCoordinate","unProjectCoordinates","simpleMapCoord","unproject","coord","c1","co","push","scalers","params","field","hasOwnProperty","type","mappingResult"],"mappings":"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","sourcesContent":["import {\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILngLat,\n  IMapService,\n  IParseDataItem,\n  IStyleAttribute,\n  IStyleAttributeService,\n  Position,\n  TYPES,\n} from '@antv/l7-core';\nimport { Version } from '@antv/l7-maps';\nimport { isColor, normalize, rgb2arr, unProjectFlat } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport { cloneDeep } from 'lodash';\nimport 'reflect-metadata';\nimport { ILineLayerStyleOptions } from '../core/interface';\n\n@injectable()\nexport default class DataMappingPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.IFontService)\n  private readonly fontService: IFontService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('DataMappingPlugin', () => {\n      // 初始化重新生成 map\n      this.generateMaping(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('DataMappingPlugin', () => {\n      layer.dataState.dataMappingNeedUpdate = false;\n      this.generateMaping(layer, { styleAttributeService });\n      return true;\n    });\n\n    // remapping before render\n    layer.hooks.beforeRender.tap('DataMappingPlugin', () => {\n      if (layer.layerModelNeedUpdate) {\n        return;\n      }\n      const bottomColor = layer.getBottomColor();\n      const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      const filter = styleAttributeService.getLayerStyleAttribute('filter');\n      const { dataArray } = layer.getSource().data;\n\n      const attributesToRemapping = attributes.filter(\n        (attribute) => attribute.needRemapping, // 如果filter变化\n      );\n      let filterData = dataArray;\n\n      // 数据过滤完 再执行数据映射\n      if (filter?.needRemapping && filter?.scale) {\n        filterData = dataArray.filter((record: IParseDataItem) => {\n          return this.applyAttributeMapping(filter, record, bottomColor)[0];\n        });\n      }\n\n      if (attributesToRemapping.length) {\n        // 过滤数据\n        if (filter?.needRemapping) {\n          layer.setEncodedData(\n            this.mapping(layer, attributes, filterData, undefined, bottomColor),\n          );\n          filter.needRemapping = false;\n        } else {\n          layer.setEncodedData(\n            this.mapping(\n              layer,\n              attributesToRemapping,\n              filterData,\n              layer.getEncodedData(),\n              bottomColor,\n            ),\n          );\n        }\n        // 处理文本更新\n        layer.emit('remapping', null);\n      }\n    });\n  }\n  private generateMaping(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const bottomColor = layer.getBottomColor();\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    const { dataArray } = layer.getSource().data;\n    let filterData = dataArray;\n    // 数据过滤完 再执行数据映射\n    if (filter?.scale) {\n      filterData = dataArray.filter((record: IParseDataItem) => {\n        return this.applyAttributeMapping(filter, record, bottomColor)[0];\n      });\n    }\n    layer.setEncodedData(\n      this.mapping(layer, attributes, filterData, undefined, bottomColor),\n    );\n    // 对外暴露事件\n    layer.emit('dataUpdate', null);\n  }\n\n  private getArrowPoints(p1: Position, p2: Position) {\n    const dir = [p2[0] - p1[0], p2[1] - p1[1]];\n    const normalizeDir = normalize(dir);\n    const arrowPoint = [\n      p1[0] + normalizeDir[0] * 0.0001,\n      p1[1] + normalizeDir[1] * 0.0001,\n    ];\n    return arrowPoint;\n  }\n\n  private mapping(\n    layer: ILayer,\n    attributes: IStyleAttribute[],\n    data: IParseDataItem[],\n    predata?: IEncodeFeature[],\n    minimumColor?: string,\n  ): IEncodeFeature[] {\n    const {\n      arrow = {\n        enable: false,\n      },\n    } = layer.getLayerConfig() as ILineLayerStyleOptions;\n    const mappedData = data.map((record: IParseDataItem, i) => {\n      const preRecord = predata ? predata[i] : {};\n      const encodeRecord: IEncodeFeature = {\n        id: record._id,\n        coordinates: record.coordinates,\n        ...preRecord,\n      };\n      attributes\n        .filter((attribute) => attribute.scale !== undefined)\n        .forEach((attribute: IStyleAttribute) => {\n          // console.log('record', record)\n          let values = this.applyAttributeMapping(\n            attribute,\n            record,\n            minimumColor,\n          );\n          // console.log('values', values)\n          attribute.needRemapping = false;\n\n          // TODO: 支持每个属性配置 postprocess\n          if (attribute.name === 'color') {\n            // console.log('attribute', attribute)\n            values = values.map((c: unknown) => {\n              return rgb2arr(c as string);\n            });\n          }\n          // @ts-ignore\n          encodeRecord[attribute.name] =\n            Array.isArray(values) && values.length === 1 ? values[0] : values;\n\n          // 增加对 layer/text/iconfont unicode 映射的解析\n          if (attribute.name === 'shape') {\n            encodeRecord.shape = this.fontService.getIconFontKey(\n              encodeRecord[attribute.name] as string,\n            );\n          }\n        });\n\n      if (encodeRecord.shape === 'line' && arrow.enable) {\n        // 只有在线图层且支持配置箭头的时候进行插入顶点的处理\n        const coords = encodeRecord.coordinates as Position[];\n        const arrowPoint = this.getArrowPoints(coords[0], coords[1]);\n        encodeRecord.coordinates.splice(1, 0, arrowPoint, arrowPoint);\n      }\n      return encodeRecord;\n    }) as IEncodeFeature[];\n    // console.log('mappedData', mappedData)\n\n    // 调整数据兼容 Amap2.0\n    this.adjustData2Amap2Coordinates(mappedData, layer);\n\n    // 调整数据兼容 SimpleCoordinates\n    this.adjustData2SimpleCoordinates(mappedData);\n\n    return mappedData;\n  }\n\n  private adjustData2Amap2Coordinates(\n    mappedData: IEncodeFeature[],\n    layer: ILayer,\n  ) {\n    // 根据地图的类型判断是否需要对点位数据进行处理, 若是高德2.0则需要对坐标进行相对偏移\n    if (\n      mappedData.length > 0 &&\n      this.mapService.version === Version['GAODE2.x']\n    ) {\n      const layerCenter = this.getLayerCenter(layer);\n      if (typeof mappedData[0].coordinates[0] === 'number') {\n        // 单个的点数据\n        // @ts-ignore\n        mappedData\n          // TODO: 避免经纬度被重复计算导致坐标位置偏移\n          .filter((d) => !d.originCoordinates)\n          .map((d) => {\n            d.version = Version['GAODE2.x'];\n            // @ts-ignore\n            d.originCoordinates = cloneDeep(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）\n            // @ts-ignore\n            // d.coordinates = this.mapService.lngLatToCoord(d.coordinates);\n            d.coordinates = this.mapService.lngLatToCoordByLayer(\n              d.coordinates,\n              layerCenter,\n            );\n          });\n      } else {\n        // 连续的线、面数据\n        // @ts-ignore\n        mappedData\n          // TODO: 避免经纬度被重复计算导致坐标位置偏移\n          .filter((d) => !d.originCoordinates)\n          .map((d) => {\n            d.version = Version['GAODE2.x'];\n            // @ts-ignore\n            d.originCoordinates = cloneDeep(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）\n            // @ts-ignore\n            // d.coordinates = this.mapService.lngLatToCoords(d.coordinates);\n            d.coordinates = this.mapService.lngLatToCoordsByLayer(\n              d.coordinates,\n              layerCenter,\n            );\n          });\n      }\n    }\n  }\n\n  private getLayerCenter(layer: ILayer) {\n    const source = layer.getSource();\n    return source.center;\n  }\n\n  private adjustData2SimpleCoordinates(mappedData: IEncodeFeature[]) {\n    if (mappedData.length > 0 && this.mapService.version === Version.SIMPLE) {\n      mappedData.map((d) => {\n        if (!d.simpleCoordinate) {\n          d.coordinates = this.unProjectCoordinates(d.coordinates);\n          d.simpleCoordinate = true;\n        }\n      });\n    }\n  }\n\n  private unProjectCoordinates(coordinates: any) {\n    if (typeof coordinates[0] === 'number') {\n      return this.mapService.simpleMapCoord.unproject(\n        coordinates as [number, number],\n      );\n    }\n\n    if (coordinates[0] && coordinates[0][0] instanceof Array) {\n      // @ts-ignore\n      const coords = [];\n      coordinates.map((coord: any) => {\n        // @ts-ignore\n        const c1 = [];\n        coord.map((co: any) => {\n          c1.push(\n            this.mapService.simpleMapCoord.unproject(co as [number, number]),\n          );\n        });\n        // @ts-ignore\n        coords.push(c1);\n      });\n      // @ts-ignore\n      return coords;\n    } else {\n      // @ts-ignore\n      const coords = [];\n      // @ts-ignore\n      coordinates.map((coord) => {\n        coords.push(\n          this.mapService.simpleMapCoord.unproject(coord as [number, number]),\n        );\n      });\n      // @ts-ignore\n      return coords;\n    }\n  }\n\n  private applyAttributeMapping(\n    attribute: IStyleAttribute,\n    record: { [key: string]: unknown },\n    minimumColor?: string,\n  ) {\n    if (!attribute.scale) {\n      return [];\n    }\n    const scalers = attribute?.scale?.scalers || [];\n    const params: unknown[] = [];\n\n    scalers.forEach(({ field }) => {\n      if (\n        record.hasOwnProperty(field) ||\n        attribute.scale?.type === 'variable'\n      ) {\n        // TODO:多字段，常量\n        params.push(record[field]);\n      }\n    });\n    // console.log('params', params)\n    // console.log('attribute', attribute)\n\n    const mappingResult = attribute.mapping ? attribute.mapping(params) : [];\n    if (attribute.name === 'color' && !isColor(mappingResult[0])) {\n      return [minimumColor];\n    }\n    return mappingResult;\n    // return attribute.mapping ? attribute.mapping(params) : [];\n  }\n}\n"],"file":"DataMappingPlugin.js"}