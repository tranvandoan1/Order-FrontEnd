{"version":3,"sources":["../../../src/line/models/linearline.ts"],"names":["LinearLineModel","createTexture2D","rendererService","colorTexture","destroy","layer","getLayerConfig","rampColors","imageData","data","Uint8Array","width","height","wrapS","gl","CLAMP_TO_EDGE","wrapT","min","NEAREST","mag","flipY","opacity","vertexHeightScale","raisingHeight","heightfixed","getDirty","bind","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","rowCount","dataTexture","length","format","LUMINANCE","type","FLOAT","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_texture","u_heightfixed","Number","u_vertexScale","u_raisingHeight","updateTexture","buildModels","mask","maskInside","depth","getShaders","frag","vert","triangulation","LineTriangulation","buildLayerModel","moduleName","vertexShader","fragmentShader","primitive","TRIANGLES","blend","getBlend","enable","stencil","linear_line_frag","linear_line_vert","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","STATIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","normal","vertexIndex","undefined","DYNAMIC_DRAW","Array","isArray","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { generateColorRamp, getMask, IColorRamp } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { ILineLayerStyleOptions } from '../../core/interface';\nimport { LineTriangulation } from '../../core/triangulation';\nimport linear_line_frag from '../shaders/linearLine/line_linear_frag.glsl';\nimport linear_line_vert from '../shaders/linearLine/line_linear_vert.glsl';\n\nexport default class LinearLineModel extends BaseModel {\n  protected colorTexture: ITexture2D;\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      vertexHeightScale = 20.0,\n      raisingHeight = 0,\n      heightfixed = false,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n\n    if (this.rendererService.getDirty()) {\n      this.colorTexture.bind();\n    }\n\n    if (this.dataTextureTest && this.dataTextureNeedUpdate({ opacity })) {\n      this.judgeStyleAttributes({ opacity });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      // 纹理支持参数\n      u_texture: this.colorTexture, // 贴图\n\n      // 是否固定高度\n      u_heightfixed: Number(heightfixed),\n\n      // 顶点高度 scale\n      u_vertexScale: vertexHeightScale,\n      u_raisingHeight: Number(raisingHeight),\n    };\n  }\n\n  public initModels(): IModel[] {\n    this.updateTexture();\n    return this.buildModels();\n  }\n\n  public clearModels() {\n    this.colorTexture?.destroy();\n    this.dataTexture?.destroy();\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n      depth = false,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    const { frag, vert, type } = this.getShaders();\n    this.layer.triangulation = LineTriangulation;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'line_' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: LineTriangulation,\n        primitive: gl.TRIANGLES,\n        blend: this.getBlend(),\n        depth: { enable: depth },\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  /**\n   * 根据参数获取不同的 shader 代码\n   * @returns\n   */\n  public getShaders(): { frag: string; vert: string; type: string } {\n    return {\n      frag: linear_line_frag,\n      vert: linear_line_vert,\n      type: 'linear_rampColors',\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'distanceAndIndex',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_DistanceAndIndex',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n          vertexIndex?: number,\n        ) => {\n          return vertexIndex === undefined\n            ? [vertex[3], 10]\n            : [vertex[3], vertexIndex];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'total_distance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Total_Distance',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[5]];\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0], size[1]] : [size as number, 0];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        // @ts-ignore\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'miter',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Miter',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[4]];\n        },\n      },\n    });\n  }\n\n  private updateTexture = () => {\n    const { createTexture2D } = this.rendererService;\n    if (this.colorTexture) {\n      this.colorTexture.destroy();\n    }\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: new Uint8Array(imageData.data),\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n    });\n  };\n}\n"],"file":"linearline.js"}