{"version":3,"file":"hide-overlap.js","sourceRoot":"","sources":["../../../../src/geometry/label/layout/hide-overlap.ts"],"names":[],"mappings":"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","sourcesContent":["import { get, each } from '@antv/util';\nimport { BBox, IGroup, IShape } from '../../../dependents';\nimport { intersect } from '../../../util/collision-detect';\nimport { LabelItem } from '../interface';\nimport { getLabelBackgroundInfo } from '../util';\nimport { createWorker } from '../util/createWorker';\nimport { code as layoutCode } from './worker/hide-overlap';\n\ntype Item = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  rotation?: number;\n  visible?: boolean;\n};\n\nconst layout = (items: Item[]): Item[] => {\n  const boxes = items.slice();\n  for (let i = 0; i < boxes.length; i++) {\n    const box1 = boxes[i];\n    if (box1.visible) {\n      for (let j = i + 1; j < boxes.length; j++) {\n        const box2 = boxes[j];\n        if (box1 !== box2 && box2.visible) {\n          if (intersect(box1, box2)) {\n            box2.visible = false;\n          }\n        }\n      }\n    }\n  }\n  return boxes;\n}\n\nconst cache: Map<string, any> = new Map();\nconst worker = createWorker(layoutCode);\n\n/**\n * label 防遮挡布局：在不改变 label 位置的情况下对相互重叠的 label 进行隐藏（非移除）\n * 不同于 'overlap' 类型的布局，该布局不会对 label 的位置进行偏移调整。\n * @param labels 参与布局调整的 label 数组集合\n */\nexport function hideOverlap(labelItems: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  // todo 添加 label rank\n  return new Promise((resolve) => {\n    const boxes = labels.map((d, idx) => ({\n      ...getLabelBackgroundInfo(d, labelItems[idx], get(labelItems[idx], 'background.padding')),\n      visible: true,\n    }));\n    const memoKey = JSON.stringify(boxes);\n    const cb = (items: Item[]) => {\n      cache.set(memoKey, items);\n      each(items, ({ visible }, idx) => {\n        const labelShape = labels[idx];\n        if (visible) {\n          labelShape?.show()\n        } else {\n          labelShape?.hide();\n        }\n      });\n      return resolve(items);\n    }\n    if (cache.get(memoKey)) {\n      cb(cache.get(memoKey))\n    } else if (worker) {\n      // Do layout in worker.\n      try {\n        worker.postMessage(JSON.stringify({ type: 'hide-overlap', items: boxes }));\n        worker.onmessage = (e) => cb(Array.isArray(e.data) ? e.data : []);\n        worker.onmessageerror = (e) => {\n          console.warn('[AntV G2] Web worker is not available');\n          // Normal layout in main thread.\n          cb(layout(boxes));\n        };\n      } catch (e) {\n        console.error(e);\n        cb(layout(boxes));\n      }\n    } else {\n      // Normal layout in main thread.\n      cb(layout(boxes));\n    }\n  });\n}\n"]}