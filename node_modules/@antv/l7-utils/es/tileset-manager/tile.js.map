{"version":3,"sources":["../../src/tileset-manager/tile.ts"],"names":["bboxPolygon","LoadTileDataStatus","getTileWarpXY","tileToBounds","Tile","options","x","y","z","tileSize","loadStatus","Loading","Loaded","Cancelled","Failure","includes","bounds","minLng","minLat","maxLng","maxLat","center","polygon","properties","key","bbox","meta","getData","onLoad","onError","loadDataId","isLoading","abortLoad","abortController","AbortController","tileData","warpX","warpY","signal","params","error","isCancelled","data","loadData","isLoaded","abort"],"mappings":"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","sourcesContent":["import bboxPolygon from '@turf/bbox-polygon';\nimport {\n  LoadTileDataStatus,\n  TileBounds,\n  TileLoadDataOptions,\n  TileOptions,\n} from './types';\nimport { getTileWarpXY, tileToBounds } from './utils/lonlat-tile';\n\n/**\n * 单个瓦片\n * 负责瓦片数据加载、缓存数据、缓存图层\n */\nexport class Tile {\n  // 瓦片索引\n  public x: number;\n  public y: number;\n  public z: number;\n  // 瓦片大小\n  public tileSize = 256;\n  // 是否可以见\n  public isVisible = false;\n  // 是否是当前层级的瓦片\n  public isCurrent = false;\n  // 瓦片挂载的图层\n  public layer: any = null;\n  // 瓦片挂载的图层组\n  public layers = [];\n  // 瓦片的父级瓦片\n  public parent: Tile | null = null;\n  // 瓦片的子级瓦片\n  public children: Tile[] = [];\n  // 瓦片数据\n  public data: any = null;\n  // 瓦片属性\n  public properties: Record<string, any> = {};\n  // 瓦片请求状态\n  private loadStatus: LoadTileDataStatus;\n  // 瓦片数据 Web 请求控制器\n  private abortController: AbortController;\n  // 瓦片序号\n  private loadDataId = 0;\n\n  constructor(options: TileOptions) {\n    const { x, y, z, tileSize } = options;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.tileSize = tileSize;\n  }\n\n  // 是否正在请求瓦片\n  public get isLoading() {\n    return this.loadStatus === LoadTileDataStatus.Loading;\n  }\n\n  // 是否瓦片请求成功\n  public get isLoaded() {\n    return this.loadStatus === LoadTileDataStatus.Loaded;\n  }\n\n  // 是否瓦片请求被取消\n  public get isCancelled() {\n    return this.loadStatus === LoadTileDataStatus.Cancelled;\n  }\n\n  // 是否数据请求结束\n  public get isDone() {\n    return [\n      LoadTileDataStatus.Loaded,\n      LoadTileDataStatus.Cancelled,\n      LoadTileDataStatus.Failure,\n    ].includes(this.loadStatus);\n  }\n\n  // 瓦片的经纬度边界\n  public get bounds() {\n    return tileToBounds(this.x, this.y, this.z);\n  }\n\n  // 瓦片边界面\n  public get bboxPolygon() {\n    const [minLng, minLat, maxLng, maxLat] = this.bounds;\n    const center = [(maxLng - minLng) / 2, (maxLat - minLat) / 2] as const;\n\n    const polygon = bboxPolygon(this.bounds as TileBounds, {\n      properties: {\n        key: this.key,\n        bbox: this.bounds,\n        center,\n        meta: `\n      ${this.key}\n      `,\n        // ${this.bbox.slice(0, 2)}\n        // ${this.bbox.slice(2)}\n      },\n    });\n    return polygon;\n  }\n\n  // 瓦片的 key\n  public get key() {\n    const key = `${this.x},${this.y},${this.z}`;\n    return key;\n  }\n\n  // 请求瓦片数据\n  public async loadData({ getData, onLoad, onError }: TileLoadDataOptions) {\n    this.loadDataId++;\n    const loadDataId = this.loadDataId;\n    // 如果重复请求，执行最新请求\n    if (this.isLoading) {\n      this.abortLoad();\n    }\n\n    this.abortController = new AbortController();\n    this.loadStatus = LoadTileDataStatus.Loading;\n\n    let tileData = null;\n    let error;\n    try {\n      const { x, y, z, bounds, tileSize } = this;\n      // wrap\n      const { warpX, warpY } = getTileWarpXY(x, y, z);\n      const { signal } = this.abortController;\n      const params = { x: warpX, y: warpY, z, bounds, tileSize, signal };\n\n      tileData = await getData(params);\n    } catch (err) {\n      error = err;\n    }\n\n    // 如果重复请求，请求序号不是最新的，丢弃旧的请求数据\n    if (loadDataId !== this.loadDataId) {\n      return;\n    }\n\n    // 如果请求被取消，返回数据为空时，不执行 onLoad 回调\n    if (this.isCancelled && !tileData) {\n      return;\n    }\n\n    // 如果请求出错或数据为空\n    if (error || !tileData) {\n      this.loadStatus = LoadTileDataStatus.Failure;\n      onError(error as Error, this);\n      return;\n    }\n\n    this.loadStatus = LoadTileDataStatus.Loaded;\n    this.data = tileData;\n\n    onLoad(this);\n  }\n\n  // 重新请求瓦片数据\n  public reloadData(params: TileLoadDataOptions) {\n    if (this.isLoading) {\n      this.abortLoad();\n    }\n    this.loadData(params);\n  }\n\n  // 取消请求瓦片数据\n  public abortLoad() {\n    if (this.isLoaded || this.isCancelled) {\n      return;\n    }\n\n    this.loadStatus = LoadTileDataStatus.Cancelled;\n    this.abortController.abort();\n  }\n}\n"],"file":"tile.js"}