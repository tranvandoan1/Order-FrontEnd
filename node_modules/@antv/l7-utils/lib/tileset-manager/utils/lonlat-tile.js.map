{"version":3,"sources":["../../../src/tileset-manager/utils/lonlat-tile.ts"],"names":["osmLonLat2TileXY","lon","lat","zoom","x","Math","floor","pow","y","log","tan","PI","cos","osmTileXY2LonLat","n","atan","exp","tileToBounds","z","minLng","maxLat","maxLng","minLat","getTileIndices","latLonBounds","maxZoom","Infinity","minZoom","zoomOffset","extent","DEFAULT_EXTENT","ceil","bounds","max","min","indices","minX","maxY","maxX","minY","push","getTileWarpXY","scale","maxIndex","distance","warpX","warpY"],"mappings":"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","sourcesContent":["import { DEFAULT_EXTENT } from '../const';\nimport { TileBounds } from '../types';\n\n// // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29\nexport function osmLonLat2TileXY(lon: number, lat: number, zoom: number) {\n  const x = Math.floor(((lon + 180) / 360) * Math.pow(2, zoom));\n  const y = Math.floor(\n    ((1 -\n      Math.log(\n        Math.tan((lat * Math.PI) / 180) + 1 / Math.cos((lat * Math.PI) / 180),\n      ) /\n        Math.PI) /\n      2) *\n      Math.pow(2, zoom),\n  );\n  return [x, y];\n}\n\n// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29\nexport function osmTileXY2LonLat(x: number, y: number, zoom: number) {\n  const lon = (x / Math.pow(2, zoom)) * 360 - 180;\n  const n = Math.PI - (2 * Math.PI * y) / Math.pow(2, zoom);\n  const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lon, lat];\n}\n\n/**\n * 获取当前瓦片的经纬度边界\n */\nexport const tileToBounds = (x: number, y: number, z: number) => {\n  const [minLng, maxLat] = osmTileXY2LonLat(x, y, z);\n  const [maxLng, minLat] = osmTileXY2LonLat(x + 1, y + 1, z);\n  return [minLng, minLat, maxLng, maxLat] as TileBounds;\n};\n\n/**\n * 获取当前视野层级瓦片的所有索引\n * latLonBounds          => pixelBounds           => tileRange             => tileIndices\n * {topLeft,bottomRight} => {topLeft,bottomRight} => {topLeft,bottomRight} => {x, y, z}[]\n * 如果当前 zoom 层级小于 minZoom 则返回空数组\n * 如果当前 zoom 层级大于 maxZoom 则返回最大的瓦片索引\n */\nexport function getTileIndices({\n  zoom,\n  latLonBounds,\n  maxZoom = Infinity,\n  minZoom = 0,\n  zoomOffset = 0,\n  extent = DEFAULT_EXTENT,\n}: {\n  zoom: number;\n  latLonBounds: TileBounds;\n  maxZoom: number;\n  minZoom: number;\n  zoomOffset: number;\n  extent: TileBounds;\n  tileSize: number;\n}) {\n  let z = Math.ceil(zoom) + zoomOffset;\n\n  // 如果当前 zoom 层级小于 minZoom\n  if (z < minZoom) {\n    z = minZoom;\n  } else if (z > maxZoom) {\n    // 如果当前 zoom 层级大于 maxZoom\n    z = maxZoom;\n  }\n\n  const [minLng, minLat, maxLng, maxLat] = latLonBounds;\n  const bounds = [\n    Math.max(minLng, extent[0]),\n    Math.max(minLat, extent[1]),\n    Math.min(maxLng, extent[2]),\n    Math.min(maxLat, extent[3]),\n  ];\n\n  const indices = [];\n\n  const [minX, maxY] = osmLonLat2TileXY(bounds[0], bounds[1], z);\n  const [maxX, minY] = osmLonLat2TileXY(bounds[2], bounds[3], z);\n\n  for (let x = minX; x <= maxX; x++) {\n    for (let y = minY; y <= maxY; y++) {\n      indices.push({ x, y, z });\n    }\n  }\n\n  return indices;\n}\n\nexport const getTileWarpXY = (x: number, y: number, z: number) => {\n  const scale = Math.pow(2, z);\n  const maxIndex = scale - 1;\n  const distance = scale;\n\n  let warpX = x;\n  const warpY = y;\n\n  if (warpX < 0) {\n    warpX = warpX + distance;\n  } else if (warpX > maxIndex) {\n    warpX = warpX % distance;\n  }\n\n  // if (warpY < 0) {\n  //   warpY = warpY + distance;\n  // } else if (warpY > maxIndex) {\n  //   warpY = Math.abs(warpY % distance);\n  // }\n\n  return { warpX, warpY };\n};\n"],"file":"lonlat-tile.js"}