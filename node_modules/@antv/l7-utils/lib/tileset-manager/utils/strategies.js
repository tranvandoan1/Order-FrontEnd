"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateTileStateOverlap = updateTileStateOverlap;
exports.updateTileStateReplace = updateTileStateReplace;
var TILE_STATE_DEFAULT = 0;
var TILE_STATE_VISITED = 1;
var TILE_STATE_VISIBLE = 2;

function updateTileStateOverlap(tiles) {
  tiles.forEach(function (tile) {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach(function (tile) {
    if (tile.isCurrent && !getPlaceholderInAncestors(tile)) {
      getPlaceholderInChildren(tile);
    }
  });
  tiles.forEach(function (tile) {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);
  });
}

function updateTileStateReplace(tiles) {
  tiles.forEach(function (tile) {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach(function (tile) {
    if (tile.isCurrent) {
      getPlaceholderInAncestors(tile);
    }
  });
  var sortedTiles = tiles.slice().sort(function (t1, t2) {
    return t1.z - t2.z;
  });
  sortedTiles.forEach(function (tile) {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);

    if (tile.children.length && (tile.isVisible || tile.properties.state & TILE_STATE_VISITED)) {
      tile.children.forEach(function (child) {
        child.properties.state = TILE_STATE_VISITED;
      });
    } else if (tile.isCurrent) {
      getPlaceholderInChildren(tile);
    }
  });
}

function getPlaceholderInAncestors(tile) {
  while (tile) {
    if (tile.isLoaded) {
      tile.properties.state |= TILE_STATE_VISIBLE;
      return true;
    }

    tile = tile.parent;
  }

  return false;
}

function getPlaceholderInChildren(tile) {
  tile.children.forEach(function (child) {
    if (child.isLoaded) {
      child.properties.state |= TILE_STATE_VISIBLE;
    } else {
      getPlaceholderInChildren(child);
    }
  });
}
//# sourceMappingURL=strategies.js.map