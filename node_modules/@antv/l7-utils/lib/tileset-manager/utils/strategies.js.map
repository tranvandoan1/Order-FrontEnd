{"version":3,"sources":["../../../src/tileset-manager/utils/strategies.ts"],"names":["TILE_STATE_DEFAULT","TILE_STATE_VISITED","TILE_STATE_VISIBLE","updateTileStateOverlap","tiles","forEach","tile","properties","state","isCurrent","getPlaceholderInAncestors","getPlaceholderInChildren","isVisible","Boolean","updateTileStateReplace","sortedTiles","slice","sort","t1","t2","z","children","length","child","isLoaded","parent"],"mappings":"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","sourcesContent":["import { Tile } from '../tile';\n\n// 访问状态\nconst TILE_STATE_DEFAULT = 0;\n// 访问状态\nconst TILE_STATE_VISITED = 1;\n// 可见状态\nconst TILE_STATE_VISIBLE = 2;\n\n/*\n * 瓦片更新状态策略 - 渐近更新策略\n * 对于当前视野 currentTile 且数据请求中的瓦片\n * 用最近上级的瓦片作为占位符\n * 如果没有最近上级瓦片可用，用最近的子级瓦片作为占位符\n */\nexport function updateTileStateOverlap(tiles: Tile[]) {\n  tiles.forEach((tile) => {\n    tile.properties.state = TILE_STATE_DEFAULT;\n  });\n  tiles.forEach((tile) => {\n    if (tile.isCurrent && !getPlaceholderInAncestors(tile)) {\n      getPlaceholderInChildren(tile);\n    }\n  });\n  tiles.forEach((tile) => {\n    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);\n  });\n}\n\n/*\n * 瓦片更新状态策略 - 全部替换策略\n * 对于当前视野的所有 currentTile 瓦片在加载完成之前，使用最近的上级瓦片作为占位符\n */\nexport function updateTileStateReplace(tiles: Tile[]) {\n  tiles.forEach((tile) => {\n    tile.properties.state = TILE_STATE_DEFAULT;\n  });\n  // 更新当前视野瓦片的上级瓦片可见状态\n  tiles.forEach((tile) => {\n    if (tile.isCurrent) {\n      getPlaceholderInAncestors(tile);\n    }\n  });\n\n  // 通过 zoom 层级排序，最小的层级在上面\n  const sortedTiles = tiles.slice().sort((t1, t2) => t1.z - t2.z);\n\n  sortedTiles.forEach((tile) => {\n    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);\n\n    if (\n      tile.children.length &&\n      (tile.isVisible || tile.properties.state & TILE_STATE_VISITED)\n    ) {\n      // 如果瓦片可见，隐藏所有的子级瓦片\n      tile.children.forEach((child) => {\n        child.properties.state = TILE_STATE_VISITED;\n      });\n    } else if (tile.isCurrent) {\n      getPlaceholderInChildren(tile);\n    }\n  });\n}\n\n/*\n * 查找上级已加载的瓦片作为占位符\n * 如果找到返回 true\n */\nfunction getPlaceholderInAncestors(tile: Tile | null) {\n  while (tile) {\n    if (tile.isLoaded) {\n      // tile.properties.state = tile.properties.state | TILE_STATE_VISIBLE\n      tile.properties.state |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\n\n/*\n * 递归查找将子级已加载瓦片作为占位符\n */\nfunction getPlaceholderInChildren(tile: Tile) {\n  tile.children.forEach((child) => {\n    if (child.isLoaded) {\n      child.properties.state |= TILE_STATE_VISIBLE;\n    } else {\n      getPlaceholderInChildren(child);\n    }\n  });\n}\n"],"file":"strategies.js"}