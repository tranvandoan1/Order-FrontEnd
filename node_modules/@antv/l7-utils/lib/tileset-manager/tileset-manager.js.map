{"version":3,"sources":["../../src/tileset-manager/tileset-manager.ts"],"names":["TilesetManager","options","Map","tile","emit","updateTileVisible","error","tileSize","minZoom","maxZoom","Infinity","zoomOffset","extent","DEFAULT_EXTENT","getTileData","NOOP","updateStrategy","UpdateTileStrategy","Overlap","updateOptions","currentTiles","every","isDone","tiles","Array","from","cacheTiles","values","sort","t1","t2","z","undefined","Math","ceil","floor","zoom","latLonBounds","lastViewStates","toString","isAddTile","tileIndices","getTileIndices","map","x","y","getTile","createTile","resizeCacheTiles","rebuildTileTree","tileId","includes","delete","onTileUnload","loadData","getData","onLoad","onTileLoad","onError","onTileError","isLoading","abortLoad","clear","removeAllListeners","beforeVisible","set","key","isVisible","isCurrent","UPDATE_TILE_STRATEGIES","isVisibleChange","some","get","indices","getTileId","Tile","maxCacheSize","DEFAULT_CACHE_SCALE","length","overflown","size","parent","children","getNearestAncestor","push","EventEmitter"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport {\n  DEFAULT_CACHE_SCALE,\n  DEFAULT_EXTENT,\n  NOOP,\n  UPDATE_TILE_STRATEGIES,\n} from './const';\nimport { Tile } from './tile';\nimport { TilesetManagerOptions, UpdateTileStrategy } from './types';\nimport { getTileIndices } from './utils/lonlat-tile';\n\n/**\n * 管理瓦片数据\n */\nexport class TilesetManager extends EventEmitter {\n  public get isLoaded() {\n    return this.currentTiles.every((tile) => tile.isDone);\n  }\n  // 缓存的瓦片数组\n  public get tiles() {\n    // 通过 zoom 层级排序，最小的层级在上面\n    const tiles = Array.from(this.cacheTiles.values()).sort(\n      (t1, t2) => t1.z - t2.z,\n    );\n    return tiles;\n  }\n  // 当前层级的瓦片\n  public currentTiles: Tile[] = [];\n  // 配置项\n  protected options: TilesetManagerOptions;\n  // 缓存的瓦片，key 为 {z}-{x}-{y}\n  private cacheTiles = new Map<string, Tile>();\n  // 上一次视野状态\n  private lastViewStates: {\n    zoom: number;\n    latLonBounds: [number, number, number, number];\n  };\n\n  constructor(options: Partial<TilesetManagerOptions>) {\n    super();\n    this.options = {\n      tileSize: 256,\n      minZoom: 0,\n      maxZoom: Infinity,\n      zoomOffset: 0,\n      extent: DEFAULT_EXTENT,\n      getTileData: NOOP,\n      updateStrategy: UpdateTileStrategy.Overlap,\n    };\n    this.updateOptions(options);\n  }\n\n  // 更新配置项\n  public updateOptions(options: Partial<TilesetManagerOptions>) {\n    const minZoom =\n      options.minZoom === undefined\n        ? this.options.minZoom\n        : Math.ceil(options.minZoom);\n    const maxZoom =\n      options.maxZoom === undefined\n        ? this.options.maxZoom\n        : Math.floor(options.maxZoom);\n    this.options = { ...this.options, ...options, minZoom, maxZoom };\n  }\n\n  // 更新\n  // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制\n  public update(zoom: number, latLonBounds: [number, number, number, number]) {\n    if (\n      this.lastViewStates &&\n      this.lastViewStates.zoom === zoom &&\n      this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()\n    ) {\n      return;\n    }\n\n    this.lastViewStates = { zoom, latLonBounds };\n\n    let isAddTile = false;\n    const tileIndices = this.getTileIndices(zoom, latLonBounds);\n\n    this.currentTiles = tileIndices.map(({ x, y, z }) => {\n      let tile = this.getTile(x, y, z);\n      if (tile) {\n        return tile;\n      }\n\n      tile = this.createTile(x, y, z);\n      isAddTile = true;\n      return tile;\n    });\n\n    if (isAddTile) {\n      // 更新缓存\n      this.resizeCacheTiles();\n      // 重新瓦片树\n      this.rebuildTileTree();\n    }\n\n    // 更新瓦片显示状态\n    this.updateTileVisible();\n  }\n\n  // 重新加载瓦片\n  public reloadAll() {\n    for (const [tileId, tile] of this.cacheTiles) {\n      if (!this.currentTiles.includes(tile)) {\n        this.cacheTiles.delete(tileId);\n        this.onTileUnload(tile);\n      }\n      this.onTileUnload(tile);\n      tile.loadData({\n        getData: this.options.getTileData,\n        onLoad: this.onTileLoad,\n        onError: this.onTileError,\n      });\n    }\n  }\n\n  // 摧毁\n  public destroy() {\n    for (const tile of this.cacheTiles.values()) {\n      if (tile.isLoading) {\n        tile.abortLoad();\n      }\n    }\n    this.cacheTiles.clear();\n    this.currentTiles = [];\n    this.removeAllListeners();\n  }\n\n  // 更新瓦片显隐状态\n  public updateTileVisible() {\n    const updateStrategy = this.options.updateStrategy;\n    const beforeVisible = new Map<string, boolean>();\n\n    // 重置显示状态\n    for (const tile of this.cacheTiles.values()) {\n      // 存储已经显示的瓦片\n      beforeVisible.set(tile.key, tile.isVisible);\n      tile.isCurrent = false;\n      tile.isVisible = false;\n    }\n    // 设置当前视野的瓦片为可见\n    for (const tile of this.currentTiles) {\n      tile.isCurrent = true;\n      tile.isVisible = true;\n    }\n\n    const tiles = Array.from(this.cacheTiles.values());\n\n    if (typeof updateStrategy === 'function') {\n      updateStrategy(tiles);\n    } else {\n      UPDATE_TILE_STRATEGIES[updateStrategy](tiles);\n    }\n\n    // 检查瓦片显示状态是否发生改变\n    const isVisibleChange = Array.from(this.cacheTiles.values()).some(\n      (tile) => tile.isVisible !== beforeVisible.get(tile.key),\n    );\n\n    if (isVisibleChange) {\n      this.emit('tile-update');\n    }\n  }\n\n  // 获取当前视野层级瓦片的所有索引\n  protected getTileIndices(\n    zoom: number,\n    latLonBounds: [number, number, number, number],\n  ) {\n    const { tileSize, extent, zoomOffset } = this.options;\n    const maxZoom = Math.floor(this.options.maxZoom);\n    const minZoom = Math.ceil(this.options.minZoom);\n\n    const indices = getTileIndices({\n      maxZoom,\n      minZoom,\n      zoomOffset,\n      tileSize,\n      zoom,\n      latLonBounds,\n      extent,\n    });\n\n    return indices;\n  }\n\n  // 瓦片加载成功回调\n  private onTileLoad = (tile: Tile) => {\n    this.emit('tile-loaded', tile);\n    this.updateTileVisible();\n  };\n\n  // 瓦片加载失败回调\n  private onTileError = (error: Error, tile: Tile) => {\n    this.emit('tile-error', { error, tile });\n    this.updateTileVisible();\n  };\n\n  // 瓦片被删除回调\n  private onTileUnload = (tile: Tile) => {\n    this.emit('tile-unload', tile);\n  };\n\n  // 获取瓦片 ID\n  private getTileId(x: number, y: number, z: number) {\n    const tileId = `${x},${y},${z}`;\n    return tileId;\n  }\n\n  // 获取瓦片\n  private getTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = this.cacheTiles.get(tileId);\n\n    return tile;\n  }\n\n  // 创建瓦片\n  private createTile(x: number, y: number, z: number) {\n    const tileId = this.getTileId(x, y, z);\n    const tile = new Tile({ x, y, z, tileSize: this.options.tileSize });\n\n    this.cacheTiles.set(tileId, tile);\n    tile.loadData({\n      getData: this.options.getTileData,\n      onLoad: this.onTileLoad,\n      onError: this.onTileError,\n    });\n\n    return tile;\n  }\n\n  // 当缓存超过最大值时，清除不可见的瓦片\n  private resizeCacheTiles() {\n    const maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;\n\n    const overflown = this.cacheTiles.size > maxCacheSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of this.cacheTiles) {\n        if (!tile.isVisible && !this.currentTiles.includes(tile)) {\n          this.cacheTiles.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (this.cacheTiles.size <= maxCacheSize) {\n          break;\n        }\n      }\n    }\n  }\n\n  // 重新计算瓦片树\n  private rebuildTileTree() {\n    // 清空瓦片上的数据\n    for (const tile of this.cacheTiles.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // 重新计算瓦片上的关系树\n    for (const tile of this.cacheTiles.values()) {\n      const parent = this.getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // 获取瓦片的最近上级的瓦片\n  private getNearestAncestor(x: number, y: number, z: number) {\n    while (z > this.options.minZoom) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      z = z - 1;\n      const parent = this.getTile(x, y, z);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"tileset-manager.js"}