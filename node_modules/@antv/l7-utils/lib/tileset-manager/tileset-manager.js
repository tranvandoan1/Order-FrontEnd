"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TilesetManager = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _eventemitter = _interopRequireDefault(require("eventemitter3"));

var _const = require("./const");

var _tile3 = require("./tile");

var _types = require("./types");

var _lonlatTile = require("./utils/lonlat-tile");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TilesetManager = function (_EventEmitter) {
  (0, _inherits2.default)(TilesetManager, _EventEmitter);

  var _super = _createSuper(TilesetManager);

  function TilesetManager(options) {
    var _this;

    (0, _classCallCheck2.default)(this, TilesetManager);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "currentTiles", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "options", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cacheTiles", new Map());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastViewStates", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTileLoad", function (tile) {
      _this.emit('tile-loaded', tile);

      _this.updateTileVisible();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTileError", function (error, tile) {
      _this.emit('tile-error', {
        error: error,
        tile: tile
      });

      _this.updateTileVisible();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTileUnload", function (tile) {
      _this.emit('tile-unload', tile);
    });
    _this.options = {
      tileSize: 256,
      minZoom: 0,
      maxZoom: Infinity,
      zoomOffset: 0,
      extent: _const.DEFAULT_EXTENT,
      getTileData: _const.NOOP,
      updateStrategy: _types.UpdateTileStrategy.Overlap
    };

    _this.updateOptions(options);

    return _this;
  }

  (0, _createClass2.default)(TilesetManager, [{
    key: "isLoaded",
    get: function get() {
      return this.currentTiles.every(function (tile) {
        return tile.isDone;
      });
    }
  }, {
    key: "tiles",
    get: function get() {
      var tiles = Array.from(this.cacheTiles.values()).sort(function (t1, t2) {
        return t1.z - t2.z;
      });
      return tiles;
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(options) {
      var minZoom = options.minZoom === undefined ? this.options.minZoom : Math.ceil(options.minZoom);
      var maxZoom = options.maxZoom === undefined ? this.options.maxZoom : Math.floor(options.maxZoom);
      this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {
        minZoom: minZoom,
        maxZoom: maxZoom
      });
    }
  }, {
    key: "update",
    value: function update(zoom, latLonBounds) {
      var _this2 = this;

      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
        return;
      }

      this.lastViewStates = {
        zoom: zoom,
        latLonBounds: latLonBounds
      };
      var isAddTile = false;
      var tileIndices = this.getTileIndices(zoom, latLonBounds);
      this.currentTiles = tileIndices.map(function (_ref) {
        var x = _ref.x,
            y = _ref.y,
            z = _ref.z;

        var tile = _this2.getTile(x, y, z);

        if (tile) {
          return tile;
        }

        tile = _this2.createTile(x, y, z);
        isAddTile = true;
        return tile;
      });

      if (isAddTile) {
        this.resizeCacheTiles();
        this.rebuildTileTree();
      }

      this.updateTileVisible();
    }
  }, {
    key: "reloadAll",
    value: function reloadAll() {
      var _iterator = _createForOfIteratorHelper(this.cacheTiles),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              tileId = _step$value[0],
              tile = _step$value[1];

          if (!this.currentTiles.includes(tile)) {
            this.cacheTiles.delete(tileId);
            this.onTileUnload(tile);
          }

          this.onTileUnload(tile);
          tile.loadData({
            getData: this.options.getTileData,
            onLoad: this.onTileLoad,
            onError: this.onTileError
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator2 = _createForOfIteratorHelper(this.cacheTiles.values()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var tile = _step2.value;

          if (tile.isLoading) {
            tile.abortLoad();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      this.cacheTiles.clear();
      this.currentTiles = [];
      this.removeAllListeners();
    }
  }, {
    key: "updateTileVisible",
    value: function updateTileVisible() {
      var updateStrategy = this.options.updateStrategy;
      var beforeVisible = new Map();

      var _iterator3 = _createForOfIteratorHelper(this.cacheTiles.values()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var tile = _step3.value;
          beforeVisible.set(tile.key, tile.isVisible);
          tile.isCurrent = false;
          tile.isVisible = false;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      var _iterator4 = _createForOfIteratorHelper(this.currentTiles),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _tile = _step4.value;
          _tile.isCurrent = true;
          _tile.isVisible = true;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var tiles = Array.from(this.cacheTiles.values());

      if (typeof updateStrategy === 'function') {
        updateStrategy(tiles);
      } else {
        _const.UPDATE_TILE_STRATEGIES[updateStrategy](tiles);
      }

      var isVisibleChange = Array.from(this.cacheTiles.values()).some(function (tile) {
        return tile.isVisible !== beforeVisible.get(tile.key);
      });

      if (isVisibleChange) {
        this.emit('tile-update');
      }
    }
  }, {
    key: "getTileIndices",
    value: function getTileIndices(zoom, latLonBounds) {
      var _this$options = this.options,
          tileSize = _this$options.tileSize,
          extent = _this$options.extent,
          zoomOffset = _this$options.zoomOffset;
      var maxZoom = Math.floor(this.options.maxZoom);
      var minZoom = Math.ceil(this.options.minZoom);
      var indices = (0, _lonlatTile.getTileIndices)({
        maxZoom: maxZoom,
        minZoom: minZoom,
        zoomOffset: zoomOffset,
        tileSize: tileSize,
        zoom: zoom,
        latLonBounds: latLonBounds,
        extent: extent
      });
      return indices;
    }
  }, {
    key: "getTileId",
    value: function getTileId(x, y, z) {
      var tileId = "".concat(x, ",").concat(y, ",").concat(z);
      return tileId;
    }
  }, {
    key: "getTile",
    value: function getTile(x, y, z) {
      var tileId = this.getTileId(x, y, z);
      var tile = this.cacheTiles.get(tileId);
      return tile;
    }
  }, {
    key: "createTile",
    value: function createTile(x, y, z) {
      var tileId = this.getTileId(x, y, z);
      var tile = new _tile3.Tile({
        x: x,
        y: y,
        z: z,
        tileSize: this.options.tileSize
      });
      this.cacheTiles.set(tileId, tile);
      tile.loadData({
        getData: this.options.getTileData,
        onLoad: this.onTileLoad,
        onError: this.onTileError
      });
      return tile;
    }
  }, {
    key: "resizeCacheTiles",
    value: function resizeCacheTiles() {
      var maxCacheSize = _const.DEFAULT_CACHE_SCALE * this.currentTiles.length;
      var overflown = this.cacheTiles.size > maxCacheSize;

      if (overflown) {
        var _iterator5 = _createForOfIteratorHelper(this.cacheTiles),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _step5$value = (0, _slicedToArray2.default)(_step5.value, 2),
                tileId = _step5$value[0],
                tile = _step5$value[1];

            if (!tile.isVisible && !this.currentTiles.includes(tile)) {
              this.cacheTiles.delete(tileId);
              this.onTileUnload(tile);
            }

            if (this.cacheTiles.size <= maxCacheSize) {
              break;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
  }, {
    key: "rebuildTileTree",
    value: function rebuildTileTree() {
      var _iterator6 = _createForOfIteratorHelper(this.cacheTiles.values()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var tile = _step6.value;
          tile.parent = null;
          tile.children.length = 0;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(this.cacheTiles.values()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _tile2 = _step7.value;
          var parent = this.getNearestAncestor(_tile2.x, _tile2.y, _tile2.z);
          _tile2.parent = parent;

          if (parent !== null && parent !== void 0 && parent.children) {
            parent.children.push(_tile2);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "getNearestAncestor",
    value: function getNearestAncestor(x, y, z) {
      while (z > this.options.minZoom) {
        x = Math.floor(x / 2);
        y = Math.floor(y / 2);
        z = z - 1;
        var parent = this.getTile(x, y, z);

        if (parent) {
          return parent;
        }
      }

      return null;
    }
  }]);
  return TilesetManager;
}(_eventemitter.default);

exports.TilesetManager = TilesetManager;
//# sourceMappingURL=tileset-manager.js.map