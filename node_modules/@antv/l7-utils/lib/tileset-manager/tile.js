"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tile = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _bboxPolygon = _interopRequireDefault(require("@turf/bbox-polygon"));

var _types = require("./types");

var _lonlatTile = require("./utils/lonlat-tile");

var Tile = function () {
  function Tile(options) {
    (0, _classCallCheck2.default)(this, Tile);
    (0, _defineProperty2.default)(this, "x", void 0);
    (0, _defineProperty2.default)(this, "y", void 0);
    (0, _defineProperty2.default)(this, "z", void 0);
    (0, _defineProperty2.default)(this, "tileSize", 256);
    (0, _defineProperty2.default)(this, "isVisible", false);
    (0, _defineProperty2.default)(this, "isCurrent", false);
    (0, _defineProperty2.default)(this, "layer", null);
    (0, _defineProperty2.default)(this, "layers", []);
    (0, _defineProperty2.default)(this, "parent", null);
    (0, _defineProperty2.default)(this, "children", []);
    (0, _defineProperty2.default)(this, "data", null);
    (0, _defineProperty2.default)(this, "properties", {});
    (0, _defineProperty2.default)(this, "loadStatus", void 0);
    (0, _defineProperty2.default)(this, "abortController", void 0);
    (0, _defineProperty2.default)(this, "loadDataId", 0);
    var x = options.x,
        y = options.y,
        z = options.z,
        tileSize = options.tileSize;
    this.x = x;
    this.y = y;
    this.z = z;
    this.tileSize = tileSize;
  }

  (0, _createClass2.default)(Tile, [{
    key: "isLoading",
    get: function get() {
      return this.loadStatus === _types.LoadTileDataStatus.Loading;
    }
  }, {
    key: "isLoaded",
    get: function get() {
      return this.loadStatus === _types.LoadTileDataStatus.Loaded;
    }
  }, {
    key: "isCancelled",
    get: function get() {
      return this.loadStatus === _types.LoadTileDataStatus.Cancelled;
    }
  }, {
    key: "isDone",
    get: function get() {
      return [_types.LoadTileDataStatus.Loaded, _types.LoadTileDataStatus.Cancelled, _types.LoadTileDataStatus.Failure].includes(this.loadStatus);
    }
  }, {
    key: "bounds",
    get: function get() {
      return (0, _lonlatTile.tileToBounds)(this.x, this.y, this.z);
    }
  }, {
    key: "bboxPolygon",
    get: function get() {
      var _this$bounds = (0, _slicedToArray2.default)(this.bounds, 4),
          minLng = _this$bounds[0],
          minLat = _this$bounds[1],
          maxLng = _this$bounds[2],
          maxLat = _this$bounds[3];

      var center = [(maxLng - minLng) / 2, (maxLat - minLat) / 2];
      var polygon = (0, _bboxPolygon.default)(this.bounds, {
        properties: {
          key: this.key,
          bbox: this.bounds,
          center: center,
          meta: "\n      ".concat(this.key, "\n      ")
        }
      });
      return polygon;
    }
  }, {
    key: "key",
    get: function get() {
      var key = "".concat(this.x, ",").concat(this.y, ",").concat(this.z);
      return key;
    }
  }, {
    key: "loadData",
    value: function () {
      var _loadData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(_ref) {
        var getData, onLoad, onError, loadDataId, tileData, error, x, y, z, bounds, tileSize, _getTileWarpXY, warpX, warpY, signal, params;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                getData = _ref.getData, onLoad = _ref.onLoad, onError = _ref.onError;
                this.loadDataId++;
                loadDataId = this.loadDataId;

                if (this.isLoading) {
                  this.abortLoad();
                }

                this.abortController = new AbortController();
                this.loadStatus = _types.LoadTileDataStatus.Loading;
                tileData = null;
                _context.prev = 7;
                x = this.x, y = this.y, z = this.z, bounds = this.bounds, tileSize = this.tileSize;
                _getTileWarpXY = (0, _lonlatTile.getTileWarpXY)(x, y, z), warpX = _getTileWarpXY.warpX, warpY = _getTileWarpXY.warpY;
                signal = this.abortController.signal;
                params = {
                  x: warpX,
                  y: warpY,
                  z: z,
                  bounds: bounds,
                  tileSize: tileSize,
                  signal: signal
                };
                _context.next = 14;
                return getData(params);

              case 14:
                tileData = _context.sent;
                _context.next = 20;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](7);
                error = _context.t0;

              case 20:
                if (!(loadDataId !== this.loadDataId)) {
                  _context.next = 22;
                  break;
                }

                return _context.abrupt("return");

              case 22:
                if (!(this.isCancelled && !tileData)) {
                  _context.next = 24;
                  break;
                }

                return _context.abrupt("return");

              case 24:
                if (!(error || !tileData)) {
                  _context.next = 28;
                  break;
                }

                this.loadStatus = _types.LoadTileDataStatus.Failure;
                onError(error, this);
                return _context.abrupt("return");

              case 28:
                this.loadStatus = _types.LoadTileDataStatus.Loaded;
                this.data = tileData;
                onLoad(this);

              case 31:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 17]]);
      }));

      function loadData(_x) {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
  }, {
    key: "reloadData",
    value: function reloadData(params) {
      if (this.isLoading) {
        this.abortLoad();
      }

      this.loadData(params);
    }
  }, {
    key: "abortLoad",
    value: function abortLoad() {
      if (this.isLoaded || this.isCancelled) {
        return;
      }

      this.loadStatus = _types.LoadTileDataStatus.Cancelled;
      this.abortController.abort();
    }
  }]);
  return Tile;
}();

exports.Tile = Tile;
//# sourceMappingURL=tile.js.map